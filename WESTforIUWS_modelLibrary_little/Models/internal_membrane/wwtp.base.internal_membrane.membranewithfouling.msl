/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 23. marts 2012 12:41:31$
 *
 ******************************************************************************/

#ifndef WWTP_BASE_INTERNAL_MEMBRANE_MEMBRANEWITHFOULING
#define WWTP_BASE_INTERNAL_MEMBRANE_MEMBRANEWITHFOULING

 CLASS MembraneWithFouling
 (* icon = "membrane"; is_default = "true" *)
 "Membrane filtration model extended with the computation of the TMP"
 EXTENDS FoulingMembraneVolumeClass WITH
 {:

  comments <- "A model for an external membrane unit, subjected to fouling (the trans-membrane pressure is computed)";

  interface <-
  {
  OBJ X_Out (* terminal = "out_2" *) "TSS in the outflow" : Concentration := {: causality <- "COUT" ; group <- "Permeate" :};
  OBJ X_Concentrate (* terminal = "out_2" *) "TSS in the concentrate" : Concentration := {: causality <- "COUT" ; group <- "Concentrate" :};
  OBJ Temp (* terminal = "in_2"; manip = "1" *)   "Temperature of the activated sludge"
  : CelsiusTemperature  := {: causality <- "CIN" ; value <- 15 ; group <- "Operational" :}; 
  OBJ PumpingEnergy (* terminal = "out_2" *)"Pumping energy" : ElectricalEnergy := {: causality <- "COUT"; group <- "Energy" :};
  };

  parameters <-
  {
  OBJ V_Tank "Tank volume " : Volume := {: value <- 100; group <- "Dimension" :};
  #ifdef CalculateTSSComponent
  OBJ F_TSS_COD "Fraction TSS/COD" : Fraction := {: value <- 0.75 ; group <- "Conversion factors" :};
  #endif // CalculateTSSComponent
// PUMPING ENERGY
    OBJ n_Pump_Membrane "Pump efficiency of the membrane pump" : Fraction := {: value <- 0.75 ; group <- "Energy":};
    OBJ n_Pump_Backwash "Pump efficiency of the backwash pump" : Fraction := {: value <- 0.75 ; group <- "Energy":};
   };
   state <-
   {
// PUMPING ENERGY
    OBJ Integ_PE_Membrane (* hidden = "1" *)"Integral Pumping energy for the transmembrane pump" : ElectricalEnergy ;
    OBJ Integ_PE_Backwash (* hidden = "1" *)"Integral Pumping energy for the backwash pump" : ElectricalEnergy ;
  };

  initial <-
  {
  state.M[IndexOfSolvent] = parameters.V_Tank / 0.000001; 
  };

  equations <-
  {
  state.K_Temp = interface.Temp + 273 ;

  state.Q_Out_Membrane = IF ((state.Q_In + state.Q_Backwash - state.Q_Out_Membrane_Help) < 0.0)
      THEN state.Q_In + state.Q_Backwash
    ELSE state.Q_Out_Membrane_Help;

  state.Q_Concentrate = IF ((state.Q_In + state.Q_Backwash - state.Q_Out_Membrane) < 0.0)
      THEN 0.0
    ELSE state.Q_In + state.Q_Backwash - state.Q_Out_Membrane;

  #ifdef CalculateTSSComponent
  state.Solids = (SUMOVER Comp_Index IN {IndexOfFirstTSSComponent .. IndexOfLastTSSComponent}: state.C[Comp_Index] * parameters.F_TSS_COD );
  #endif
  #ifdef UseTSSComponent
  state.Solids = state.C[IndexOfTSSComponent];
  #endif
  //
  #ifdef CalculateTSSComponent
  interface.X_Out = (SUMOVER Comp_Index IN {IndexOfFirstTSSComponent .. IndexOfLastTSSComponent}: (- interface.Outflow[Comp_Index]) * parameters.F_TSS_COD);
  interface.X_Concentrate = (SUMOVER Comp_Index IN {IndexOfFirstTSSComponent .. IndexOfLastTSSComponent}: (- interface.OutflowConcentrate[Comp_Index]) * parameters.F_TSS_COD);
  #endif // CalculateTSSComponent
  // ASM2-type category
  #ifdef UseTSSComponent
  interface.X_Out = (- interface.Outflow[IndexOfTSSComponent]) ;
  interface.X_Concentrate = (- interface.OutflowConcentrate[IndexOfTSSComponent]) ;
  #endif // UseTSSComponent 

// PUMPING ENERGY
  DERIV(state.Integ_PE_Membrane,[independent.t])=  state.Q_Out_Membrane * state.TMP / (3600000.0 * parameters.n_Pump_Membrane);
  DERIV(state.Integ_PE_Backwash,[independent.t])=  state.Q_Backwash * state.TMP / (3600000.0 * parameters.n_Pump_Backwash);
// 3600 conversion h to sec
// 1000 conversion from Pa to kPa 
  interface.PumpingEnergy = state.Integ_PE_Membrane + state.Integ_PE_Backwash;
  };

 :};
  

#endif    // WWTP_BASE_INTERNAL_MEMBRANE_MEMBRANEWITHFOULING
