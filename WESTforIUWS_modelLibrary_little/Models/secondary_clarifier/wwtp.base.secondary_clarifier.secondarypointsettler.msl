/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 5. juni 2012 16:45:20$
 *
 ******************************************************************************/

#ifndef WWTP_BASE_SECONDARY_CLARIFIER_SECONDARYPOINTSETTLER
#define WWTP_BASE_SECONDARY_CLARIFIER_SECONDARYPOINTSETTLER

#ifdef StandardCategoryModels
 CLASS SecondaryPointSettler
 (* icon = "secondary_clarifier" *)
 "Point-settler model for secondary clarifiers"
  EXTENDS PointSettler WITH
  {:
    comments <- "A model for a secondary point settler only using mass balances";
    parameters <-
    {
    OBJ f_ns "Non-settleable fraction of suspended solids" : Fraction := {: value <- 0.005 ; group <- "Settling" :};
    };
    equations <-
    {
    state.f_ns_help = parameters.f_ns ;
    };
  :};
  
 
    CLASS Empirical
    (* icon = "secondary_clarifier" *)
   "Empirical"				
  
   SPECIALISES PhysicalDAEModelType :=
   {:
    interface <-
     { 
      OBJ Inflow (* terminal = "in_1" *) "Inflow" : 
           InWWTPTerminal := {: causality <- "CIN" ; group <- "Influent" :};
      OBJ Outflow (* terminal = "out_1" *) "Overflow" : 
           OutWWTPTerminal := {: causality <- "COUT" ; group <- "Effluent" :};
      OBJ Underflow (* terminal = "out_2" *) "Underflow" : 
           OutWWTPTerminal := {: causality <- "COUT" ; group <- "Underflow" :};
		  OBJ X_out (* terminal = "out_3" *) "TSS out" : 
           Concentration := {: causality <- "COUT" ; group <- "Effluent" :};
  	  OBJ Q_Under (* terminal = "in_2" *) "Q_Under" : 
           FlowRate := {: causality <- "CIN" ; group <- "Operational" :};
  	  OBJ Inflow1 (* terminal = "in_2" *) "Measured plant inflow" : 
           FlowRate := {: causality <- "CIN" ; group <- "Operational" :};
     };
  
    parameters <- 
     { 
  	  OBJ Q_a "f_ns=(Q_a*Q^Q_b)/Q" : Real := {: value <- 0.8 ; group <- "Clarification" :};
  	  OBJ Q_b "f_ns=(Q_a*Q^Q_b)/Q" : Real := {: value <- 0.8 ; group <- "Clarification" :};
  	  OBJ f_ns_DW "Non-settleable fraction of suspended solids in DWF" : Fraction := {: value <- 0.0005 ; group <- "Clarification" :};
  	  OBJ A "Surface of secondary clarifier" : Area := {: value <- 1500 ; group <- "Dimension" :};
      OBJ H "Height of secondary clarifier" : Length := {: value <- 4 ; group <- "Dimension" :};
  	  OBJ t_tol "Minimum time for start and stop of clarification problems" : Time := {: value <- 0.01 ; group <- "Clarification" :};
  	  OBJ Q_ON "Flow rate for start of clarification problems" : FlowRate := {: value <- 40000 ; group <- "Clarification" :};	
  	  OBJ Q_OFF "Flow rate for stop of clarification problems" : FlowRate := {: value <- 40000 ; group <- "Clarification" :};
  	  OBJ t_delay "f_ns = (t_start/t_delay)^t_delay_exp" : Time := {: value <- 0.25 ; group <- "Clarification" :};
  	  OBJ t_delay_exp "f_ns = (t_start/t_delay)^t_delay_exp" : Real := {: value <- 2 ; group <- "Clarification" :};
  	  OBJ t_after "f_ns = max_after - ((t-t_stop)/t_after)^t_after_exp" : Time := {: value <- 1 ; group <- "Clarification" :};
  	  OBJ t_after_exp "f_ns = max_after - ((t-t_stop)/t_after)^t_after_exp" : Real := {: value <- 0.5 ; group <- "Clarification" :};
  	  OBJ max_after "f_ns = max_after - ((t-t_stop)/t_after)^t_after_exp" : Real := {: value <- 2 ; group <- "Clarification" :};
  	  OBJ DW_Q_exp "Exponent for DW Q dependency, (Q/Q_ON)^DW_Q_exp" : Real := {: value <- 0.5 ; group <- "Clarification" :};
  	  OBJ C_c "Average TSS concentration entering the SST" : Concentration := {: value <- 4500 ; group <- "Clarification" :};
  	  	
  	  OBJ Q_ONs "Flow rate for start of settling problems" : FlowRate := {: value <- 40000 ; group <- "Settling" :};
  	  OBJ f_s_DW "fs1=f_s_DW*1000*f_ns" : Real := {: value <- 4; group <- "Settling" :};  	
  	  OBJ Q_as "fs2=Q_as*Q_ONs/Q" : Real := {: value <- 0.5 ; group <- "Settling" :};
  	  OBJ C_s "fs3=C_s*TSS" : Real := {: value <- 0.001 ; group <- "Settling" :};
  	  
  	  OBJ T_Average "Averaging time used for the inflow" : Time := {: value <- 0.1; group <- "" :};
     };
  	 
  	independent <- 
     { 
      OBJ t "Time"  : Time := {: group <- "Time" :}; 
     };
  
    state <-
     {
  	  OBJ V (* is_favorite = "1" *) "Volume" : Volume := {: group <- "Operational" :};
  	  OBJ M "Vector containing masses for all the components" : MassVector := {: group <- "Operational" :};
  	  OBJ Q_In (* is_favorite = "1" *) "Influent flow rate" : FlowRate := {: group <- "Operational" :};	
      OBJ C "Vector containing concentrations for all the components" : ConcentrationVector := {: group <- "Operational" :}; 
  	  OBJ Q_Out "Effluent flow rate" : FlowRate := {: group <- "Operational" :};
      OBJ Q_Under_Actual "Underflow rate" : FlowRate := {: group <- "Operational" :};
      OBJ Q_Under_Actual_h "Underflow rate" : FlowRate := {: group <- "Operational" :};
      OBJ Help_X_In (* hidden = "1" *) "" : MassFlux;
      OBJ Help_X_Out (* hidden = "1" *) "" : MassFlux;
      OBJ Help_X_Under (* hidden = "1" *) "" : MassFlux;
      OBJ X_In "Influent suspended solids concentration" : Concentration := {: group <- "Operational" :};
      OBJ X_Out "Effluent suspended solids concentration" : Concentration := {: group <- "Operational" :};
      OBJ X_Under "Underflow suspended solids concentration" : Concentration := {: group <- "Operational" :};
  	  OBJ f_ns "Non-settleable fraction of suspended solids" : Real := {: group <- "Clarification" :};
  	  OBJ thelp (* hidden = "1" *) "Help variable to calculate the time from start of event" : Real := {: group <- "Clarification" :};
  	  OBJ tstart (* hidden = "0" *) "Help variable to calculate the time from start of event" : Real := {: group <- "Clarification" :};
  	  OBJ tstop (* hidden = "0" *) "Help variable to calculate the time from stop of event" : Real := {: group <- "Clarification" :};
  	  OBJ ON (* hidden = "0" *) "True if 1, False if 0" : Integer := {: group <- "Clarification" :}; // try get rid of it and use just Q_ON
  	  OBJ counter (* hidden = "1" *) "Counts the number of starts" : Integer := {: group <- "Clarification" :};
  	  OBJ t_fromstart (* hidden = "1" *) "Help variable to calculate the time from start of event" : Real := {: group <- "Clarification" :};
  	  OBJ Inflow11 (* hidden = "0" *) "Effluent flow rate" : FlowRate := {: group <- "Clarification" :};
  	  OBJ fns1 (* hidden = "0" *) "Help variable" : Real := {: group <- "Clarification" :};
  	  OBJ fns2 (* hidden = "0" *) "Help variable" : Real := {: group <- "Clarification" :};
  	  OBJ fns3 (* hidden = "0" *) "Help variable" : Real := {: group <- "Clarification" :};
  	  OBJ fns4 (* hidden = "0" *) "Help variable" : Real := {: group <- "Clarification" :};
  	  OBJ fns4_h (* hidden = "0" *) "Help variable" : Real := {: group <- "Clarification" :};
  	  OBJ tstart1 (* hidden = "1" *) "Help variable" : Boolean := {: group <- "Clarification" :};
  	  OBJ tstart2 (* hidden = "1" *) "Help variable" : Boolean := {: group <- "Clarification" :};
  	  OBJ tstart3 (* hidden = "1" *) "Help variable" : Boolean := {: group <- "Clarification" :};
  	  
  	  OBJ Underflow_help (* hidden = "1" *) "Underflow suspended solids concentration" : MassFluxVector := {: group <- "Settling" :};
  	  OBJ f_s "Settleable fraction of suspended solids" : Real := {: group <- "Settling" :};
  	  OBJ fs1 (* hidden = "0" *) "Help variable" : Real := {: group <- "Settling" :};
  	  OBJ fs2 (* hidden = "0" *) "Help variable" : Real := {: group <- "Settling" :};
  	  OBJ fs3 (* hidden = "0" *) "Help variable" : Real := {: group <- "Settling" :};
      
  	 
     };
     
    initial <-  
     {
  	  state.M[IndexOfSolvent] = parameters.A * parameters.H / 0.000001;
      state.ON = 0;
  	  state.tstart = 0;
  	  state.thelp = 0;
  	  state.tstop = 0;
  	  state.counter = 0;				
     };
  
    equations <-
     {
  		state.Q_In = (0.000001 * interface.Inflow[IndexOfSolvent]);
      
  		{FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
       DERIV(state.M[Comp_Index],[independent.t]) = interface.Inflow[Comp_Index] + interface.Outflow[Comp_Index] + interface.Underflow[Comp_Index] ;};
  						
       DERIV(state.Inflow11,[independent.t]) = (interface.Inflow1 - state.Inflow11) / parameters.T_Average;
  	 
  	   state.tstart1 = previous(state.ON) == 0;
  	   state.tstart2 = state.Inflow11 > parameters.Q_ON;
  	   state.tstart3 =  previous(state.Inflow11) <= parameters.Q_ON;
  	 
  	   state.tstart = IF ((previous(state.ON) == 0) && (state.Inflow11 > parameters.Q_ON) && (previous(state.Inflow11) <= parameters.Q_ON))
  	 		  	  	      THEN independent.t
  					          ELSE previous(state.tstart);
  	   state.counter = IF ((previous(state.ON) == 0) && (state.Inflow11 > parameters.Q_ON) && (previous(state.Inflow11) <= parameters.Q_ON))
  	 		  	  	       THEN previous(state.counter) + 1
  					           ELSE previous(state.counter);
  	   state.thelp = IF (state.counter > 0)
  	 		  	         THEN independent.t - state.tstart
  				           ELSE 0;
  	   state.tstop = IF ((previous(state.ON) == 1) && (state.Inflow11 < parameters.Q_OFF) && (previous(state.Inflow11) >= parameters.Q_OFF))
  	 		  	         THEN independent.t
  				           ELSE previous(state.tstop);
  	   state.ON = IF ((state.thelp > parameters.t_tol) && (state.tstop < state.tstart))
  	 		  	      THEN 1
  				        ELSE 0;	
  	
  	   state.t_fromstart = IF ((state.ON == 0) && (state.Inflow11 <= parameters.Q_OFF))
  				  	             THEN 0 
  					               ELSE IF (state.thelp < parameters.t_delay)
  						                  THEN state.thelp
  						                  ELSE parameters.t_delay;
  	
  	   state.fns1 = IF (state.X_In < 100)
  	                THEN parameters.f_ns_DW * pow(state.Inflow11 / parameters.Q_ON,parameters.DW_Q_exp)
  	                ELSE parameters.f_ns_DW * pow(state.Inflow11 / parameters.Q_ON,parameters.DW_Q_exp) * parameters.C_c / state.X_In;
  	   
  	   state.fns2 = IF (state.Inflow11 > parameters.Q_OFF)
								    THEN parameters.Q_a * pow((state.Inflow11-parameters.Q_OFF),parameters.Q_b) / state.Inflow11
								    ELSE 0;
								    
  	   state.fns3 = pow((state.t_fromstart/parameters.t_delay),parameters.t_delay_exp);
  	   
  	   state.fns4_h = parameters.max_after - pow(((independent.t - state.tstop)/parameters.t_after),parameters.t_after_exp);
  	   
  	   state.fns4 = IF (state.fns4_h <= 0)
  							    THEN 0
  							    ELSE state.fns4_h;
  	
  	   state.f_ns = IF ((state.ON == 0) || (state.Inflow11 <= parameters.Q_ON))
  				          THEN state.fns1 * (1 + state.fns4)
  				          ELSE state.fns1 * (1 + state.fns4) + state.fns2 * state.fns3; 
  				          
  		 state.fs1 = IF (state.Inflow11 < parameters.Q_ONs)
								   THEN (parameters.f_s_DW - state.f_ns)
								   ELSE 1;
  		 
  		 state.fs2 = IF (state.Inflow11 > parameters.Q_ONs)
								   THEN parameters.Q_as * parameters.Q_ONs / state.Inflow11
								   ELSE 1;
								   
			 state.fs3 = IF (parameters.C_s * state.C[X_TSS] > 2)
								   THEN 2
								   ELSE IF (parameters.C_s * state.C[X_TSS] < 0.5)
								        THEN 0.5
								        ELSE parameters.C_s * state.C[X_TSS];
								   
			 state.f_s = //IF ((state.fs1 * state.fs2 * state.fs3 - state.f_ns) > 1)
								   //THEN 1 - state.f_ns
								   //ELSE 
								   state.fs1 * state.fs2 * state.fs3 - state.f_ns;
  	
  	   DERIV(state.Q_Under_Actual,[independent.t]) = (interface.Q_Under - state.Q_Under_Actual) / parameters.T_Average;
  	   state.Q_Under_Actual_h = IF (state.Q_In <= state.Q_Under_Actual)
  				   		                THEN 0.5 * state.Q_In
  				   		                ELSE state.Q_Under_Actual; 
  
       state.Q_Out = state.Q_In - state.Q_Under_Actual_h;
  					
  	   state.V = 0.000001*state.M[IndexOfSolvent];
  	
  	   {FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
        state.C[Comp_Index] = IF (state.V == 0)
  				                    THEN 0
  				                    ELSE state.M[Comp_Index]/state.V;};
  
       {FOREACH Comp_Index IN {IndexOfSolvent .. IndexOfLastSolubleComponent}:
        interface.Outflow[Comp_Index] = IF (state.Q_In == 0)
  				                              THEN 0
  				                              ELSE - interface.Inflow[Comp_Index] * (state.Q_Out / state.Q_In);};
  
       {FOREACH Comp_Index IN {IndexOfSolvent .. IndexOfLastSolubleComponent}:
        interface.Underflow[Comp_Index] = IF (state.Q_In == 0)
  				                                THEN 0
  				                                ELSE - interface.Inflow[Comp_Index] * (state.Q_Under_Actual_h / state.Q_In) ;};
  
       {FOREACH Comp_Index IN {IndexOfFirstParticulateComponent .. IndexOfLastParticulateComponent}:
        interface.Outflow[Comp_Index] = IF (state.Q_In == 0)
  				   		                        THEN 0
  							                        ELSE - interface.Inflow[Comp_Index] * state.f_ns ;};   
  
       {FOREACH Comp_Index IN {IndexOfFirstParticulateComponent .. IndexOfLastParticulateComponent}:
        state.Underflow_help[Comp_Index] = IF (state.Q_In == 0)
  				   		   			                   THEN 0
  										                     ELSE - interface.Inflow[Comp_Index] * state.f_s * (state.M[Comp_Index] - 100000) / state.M[Comp_Index] ;};
     
  	   {FOREACH Comp_Index IN {IndexOfFirstParticulateComponent .. IndexOfLastParticulateComponent}:
        
        interface.Underflow[Comp_Index] = state.Underflow_help[Comp_Index];};
  
        state.X_In = 	IF (state.Q_In == 0)
  			   		        THEN 0
  					          ELSE interface.Inflow[IndexOfTSSComponent] / state.Q_In;
  
        state.X_Out =  IF (state.Q_In == 0)
    		         	     THEN 0
  		   	   		       ELSE IF (state.Q_Out <= (0.5 * state.Q_In))
  		   	   		            THEN (- interface.Outflow[IndexOfTSSComponent] / (0.5 * state.Q_In))
  		   	   		            ELSE (- interface.Outflow[IndexOfTSSComponent] / state.Q_Out);
  
        state.X_Under = IF ((0.5 * state.Q_In) <= interface.Q_Under) 
  			  	  	        THEN IF (state.Q_In == 0)
    		         	           THEN 0
  		   	   		             ELSE - interface.Underflow[IndexOfTSSComponent] / (0.5 * state.Q_In)
  			  		          ELSE IF (interface.Q_Under == 0)
    		         	           THEN 0
  		   	   		             ELSE - interface.Underflow[IndexOfTSSComponent] / (state.Q_Under_Actual);

        interface.X_out = state.X_Out;
     };
 :};
  
 
#endif // StandardCategoryModels

#endif // WWTP_BASE_SECONDARY_CLARIFIER_SECONDARYPOINTSETTLER

