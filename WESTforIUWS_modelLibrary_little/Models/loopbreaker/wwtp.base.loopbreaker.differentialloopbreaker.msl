/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 23. marts 2012 12:41:31$
 *
 ******************************************************************************/

#ifndef WWTP_BASE_LOOPBREAKER_DIFFERENTIALLOOPBREAKER
#define WWTP_BASE_LOOPBREAKER_DIFFERENTIALLOOPBREAKER

CLASS DifferentialLoopBreaker
(* icon = "loop_breaker" *)
"An Explicit Implicit Algebraic Loop Breaker using differential equations "

SPECIALISES PhysicalDAEModelType :=
{:
  comments <- "A model for a loopbreaker without differential equations";
  interface <-
  {
   OBJ Inflow (* terminal = "in_1" *) "inflow" :
        InWWTPTerminal := {: causality <- "CIN" ; group <- "Influent" :};
   OBJ Outflow (* terminal = "out_1" *) "outflow" :
        OutWWTPTerminal := {: causality <- "COUT" ; group <- "Effluent" :};
  };

  parameters <-
  {
   OBJ Tau "Implicit loop breaker time constant, d" : Time := {: value <- 0.0005 ; group <- "Miscellaneous" :};
  };

  independent <- 
  { 
   OBJ t "Time" : Time := {: group <- "Time" :}; 
  };

  state <-
  {
   OBJ FluxPerComponent (* hidden = "1" *) : MassFluxVector;
  };

  equations <-
  {

   { FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
      DERIV(state.FluxPerComponent[Comp_Index],[independent.t]) =
       - (1 / parameters.Tau) *
       (state.FluxPerComponent[Comp_Index] - interface.Inflow[Comp_Index]);
   };

   { FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
      interface.Outflow[Comp_Index] =
       - state.FluxPerComponent[Comp_Index];
   };

  };

:};

#endif // WWTP_BASE_LOOPBREAKER_DIFFERENTIALLOOPBREAKER


