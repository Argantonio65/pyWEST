/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 23. marts 2012 12:41:29$
 *
 ******************************************************************************/

#ifndef WWTP_BASE_BUFFERTANK_VARVOLUMEEQUALISATIONTANK
#define WWTP_BASE_BUFFERTANK_VARVOLUMEEQUALISATIONTANK

  CLASS VarVolumeEqualisationTank
  (* icon = "equalisation_tank" ; is_default = "true" *)
  "Model for an equalisation tank"
  SPECIALISES VarVolumeBuffer :=
  {:
  comments <- "A model for an equalisation tank with a fixed volume";
  interface <-
  {
   OBJ MixingEnergy (* terminal = "out_2" *)"Mixing energy" : ElectricalEnergy := {: causality <- "COUT"; group <- "Energy" :};
  };
  parameters <- 
   {
// MIXING ENERGY
  OBJ ME_unit "Energy requirement per unit of volume for mixing in the tank" : Real := {: value <- 0.005; group <- "Mixing energy":};
   };
   state <-
   {
// MIXING ENERGY
    OBJ Integ_ME (* hidden = "1" *)"Integral mixing energy" : ElectricalEnergy ;
  OBJ ME_Instant (* hidden = "1" *)"Instantaneous mixing energy" : Real:= {: group <- "Mixing":};
   };
  
  equations <-
  {
// MIXING ENERGY
  state.ME_Instant = parameters.ME_unit * state.V;    
  DERIV(state.Integ_ME,[independent.t])= state.ME_Instant;
  interface.MixingEnergy = state.Integ_ME ;
  };

  :};  

#endif // WWTP_BASE_BUFFERTANK_VARVOLUMEEQUALISATIONTANK

// ***********************************************************************
