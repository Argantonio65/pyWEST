/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 23. april 2012 08:05:07$
 *
 ******************************************************************************/

#ifndef WWTP_BASE_CHEMICAL_DOSING_UNITS
#define WWTP_BASE_CHEMICAL_DOSING_UNITS

 CLASS DosingUnit
 "A dosing unit model"
 SPECIALISES PhysicalDAEModelType :=
 {:

  interface <-
  {
  // REMARK: by defining the Outflow as of WWTPTerminal, ie as flux,
  // we'll also have to incorporate a C-to-F convertor within this Class
  // This approach seemed preferable, to simplify the drawings
  OBJ Outflow (* terminal = "out_1" *) "Outflow" :
      OutWWTPTerminal := {: causality <- "COUT" ; group <- "Effluent" :};
  OBJ Q_Dose (* terminal = "in_1"; manip = "1" *) "Flowrate of the solution" : 
      FlowRate := {: causality <- "CIN"; value <- 10 ; group <- "Operational" :};
   OBJ PumpingEnergy (* terminal = "out_2" *)"Pumping energy" : ElectricalEnergy := {: causality <- "COUT"; group <- "Energy" :};
  };

  parameters <-
  {
  //OBJ WWTPSpecificVolume (* hidden = "1" *) "The specific volumes (= 1/density) of the components"
   //     : SpecificVolumeVector;
  OBJ C_Dose "Concentration of the solution" : 
       Concentration := {: value <- 1 ; group <- "Concentration" :};
  OBJ MW (* hidden = "1" *) "Molecular weight of the chemical species dosed"
        : Real := {: group <- "System" :};
// PUMPING ENERGY
    OBJ F_Energy_FlowRate "Conversion factor Energy needed/Pump flow rate" : Ratio := {: value <- 0.04 ; group <- "Energy":};
  };

  independent <-
  {
  OBJ t "Time": Time := {: group <- "Time" :};
  };

  state <-
  {
// PUMPING ENERGY
    OBJ Integ_PE (* hidden = "1" *)"Integral Pumping energy" : ElectricalEnergy ;
  };
  initial <-
  {
 // parameters.WWTPSpecificVolume[IndexOfSolvent] := 0.000001;
  };

  equations <-
  {
  interface.Outflow[IndexOfSolvent] = - interface.Q_Dose
      / 0.000001;

// PUMPING ENERGY
  DERIV(state.Integ_PE,[independent.t])=  interface.Q_Dose;
  interface.PumpingEnergy = parameters.F_Energy_FlowRate * state.Integ_PE ;
  };

 :};

#if (defined StandardCategoryModels)
 CLASS AdditionOfFermentationProducts
 "A dosing unit model for the addition of external source of carbon"
 EXTENDS DosingUnit WITH
 {:

  parameters <-
  {
   OBJ COD (* hidden = "1" *) "COD equivalent of the chemical dosed"
        : Real := {: group <- "System" :};
  };

  equations <-
  {
#if (defined ASM1Temp || defined ASM3Temp)
   interface.Outflow[S_S] = - interface.Q_Dose * parameters.C_Dose *
      (parameters.COD / parameters.MW) ;
#endif
    
#if (defined ASM2dModTemp)
   interface.Outflow[S_A] = - interface.Q_Dose * parameters.C_Dose *
      (parameters.COD / parameters.MW) ;
#endif
  };
	 
	 :};
	 #endif // StandardCategoryModels

#if (defined StandardCategoryModels)
 CLASS AdditionOfCOD
	 (* icon = "dosing_unit_acetate" *)
 "A dosing unit model for the addition of external source of carbon"
 EXTENDS DosingUnit WITH
 {:

  parameters <-
  {
	 OBJ f_S_A (* hidden = "0" *) "COD fraction of S_A"
        : Fraction := {: value <- 0.5 ; group <- "System" :};
	 OBJ f_S_F (* hidden = "0" *) "COD fraction of S_F"
        : Fraction := {: value <- 0.25 ; group <- "System" :};
	 OBJ f_X_S (* hidden = "0" *) "COD fraction of X_S"
        : Fraction := {: value <- 0.25 ; group <- "System" :};
  };
	 
	   initial <-
  {
   parameters.f_X_S = 1 - parameters.f_S_A - parameters.f_S_F;
  };

  equations <-
  {
#if (defined ASM1Temp || defined ASM3Temp)
   interface.Outflow[S_S] = - interface.Q_Dose * parameters.C_Dose *
      (parameters.f_S_A + parameters.f_S_F) ;
#endif
    
#if (defined ASM2dModTemp)
   interface.Outflow[S_A] = - interface.Q_Dose * parameters.C_Dose *
      parameters.f_S_A ;
	 interface.Outflow[S_F] = - interface.Q_Dose * parameters.C_Dose *
      parameters.f_S_F ;
#endif
	 
	 interface.Outflow[X_S] = - interface.Q_Dose * parameters.C_Dose *
      parameters.f_X_S ;
  };

:};
#endif // StandardCategoryModels

#if (defined StandardCategoryModels)
 CLASS AdditionOfFermentableCOD
 "A dosing unit model for the addition of external source of carbon"
 EXTENDS DosingUnit WITH
 {:

  parameters <-
  {
   OBJ COD (* hidden = "1" *) "COD equivalent of the chemical dosed"
        : Real := {: group <- "System" :};
  };

  equations <-
  {
#if (defined ASM1Temp || defined ASM3Temp)
   interface.Outflow[S_S] = - interface.Q_Dose * parameters.C_Dose *
      (parameters.COD / parameters.MW) ;
#endif
    
#if (defined ASM2dModTemp)
   interface.Outflow[S_F] = - interface.Q_Dose * parameters.C_Dose *
      (parameters.COD / parameters.MW) ;
#endif
  };

:};
#endif // StandardCategoryModels

#if (defined ASM2dModTemp)
 CLASS P_Precipitation
 "A dosing unit model for the chemical precipitation of P"
 EXTENDS DosingUnit WITH
 {:

  parameters <-
  {
   OBJ MW_FeOH (* hidden = "1" *) "Molecular weight of Ferric Hydroxyde"
        : Real := {: value <- 106.85 ; group <- "System" :};
   OBJ Equiv_P "Molar equivalence to phosphorous"
        : Fraction := {: group <- "Operational" :};
  };

  equations <-
  {
   interface.Outflow[X_MEOH] = - interface.Q_Dose * parameters.C_Dose *
      parameters.Equiv_P * (parameters.MW/parameters.MW_FeOH) ;
  };

:};
#endif // ASM2dModTemp

#include "dosing_unit/wwtp.base.dosing_units.acetate.msl"
#include "dosing_unit/wwtp.base.dosing_units.methanol.msl"
#include "dosing_unit/wwtp.base.dosing_units.ethanol.msl"
#include "dosing_unit/wwtp.base.dosing_units.alum.msl"
#include "dosing_unit/wwtp.base.dosing_units.ironhydroxide.msl"

#endif // WWTP_BASE_CHEMICAL_DOSING_UNITS_ACETATE
