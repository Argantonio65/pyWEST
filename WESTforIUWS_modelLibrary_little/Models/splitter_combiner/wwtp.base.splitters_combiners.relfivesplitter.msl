/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 23. marts 2012 12:41:34$
 *
 ******************************************************************************/

#ifndef WWTP_BASE_SPLITTERS_COMBINERS_RELFIVESPLITTER
#define WWTP_BASE_SPLITTERS_COMBINERS_RELFIVESPLITTER

 CLASS RelFiveSplitter
 (* icon = "five_fraction_splitter" ; is_default = "true" *)
 "relative five splitter"

// Dividing a flow in five fractions, based on the flow fraction parameter.  
            
 EXTENDS WWTPAtomicModelWithoutVolume WITH
 {:
  comments <- "A model for a relative splitter into five flows";
  interface <-
   { 
    OBJ Inflow (* terminal = "in_1" *) "Inflow" : 
         InWWTPTerminal := {: causality <- "CIN" ; group <- "Influent" :};
    OBJ Outflow1 (* terminal = "out_1" *) "Outflow1" : 
         OutWWTPTerminal := {: causality <- "COUT" ; group <- "Effluent 1" :};
    OBJ Outflow2 (* terminal = "out_2" *) "Outflow2"  : 
         OutWWTPTerminal := {: causality <- "COUT" ; group <- "Effluent 2" :};
    OBJ Outflow3 (* terminal = "out_3" *) "Outflow3"  : 
         OutWWTPTerminal := {: causality <- "COUT" ; group <- "Effluent 3" :};
    OBJ Outflow4 (* terminal = "out_4" *) "Outflow4"  : 
         OutWWTPTerminal := {: causality <- "COUT" ; group <- "Effluent 4" :};
    OBJ Outflow5 (* terminal = "out_5" *) "Outflow5"  : 
         OutWWTPTerminal := {: causality <- "COUT" ; group <- "Effluent 5" :};
    OBJ f_Out2 (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Fraction of the fluxes going to outflow2" : 
     Fraction := {: causality <- "CIN" ; value <- 0.2 ; group <- "Operational" :};
    OBJ f_Out3 (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Fraction of the fluxes going to outflow3" : 
     Fraction := {: causality <- "CIN" ; value <- 0.2 ; group <- "Operational" :};
    OBJ f_Out4 (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Fraction of the fluxes going to outflow4" : 
     Fraction := {: causality <- "CIN" ; value <- 0.2 ; group <- "Operational" :};
    OBJ f_Out5 (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Fraction of the fluxes going to outflow5" : 
     Fraction := {: causality <- "CIN" ; value <- 0.2 ; group <- "Operational" :};
   };
  parameters <- 
   { 
   };
  state <-  
  {
    OBJ Q_Out1 (* is_favorite = "1" *) "Effluent flow rate from flow 1" : FlowRate := {: group <- "Operational" :};
    OBJ Q_Out2 (* is_favorite = "1" *) "Effluent flow rate from flow 2" : FlowRate := {: group <- "Operational" :};
    OBJ Q_Out3 (* is_favorite = "1" *) "Effluent flow rate from flow 3" : FlowRate := {: group <- "Operational" :};
    OBJ Q_Out4 (* is_favorite = "1" *) "Effluent flow rate from flow 4" : FlowRate := {: group <- "Operational" :};
    OBJ Q_Out5 (* is_favorite = "1" *) "Effluent flow rate from flow 5" : FlowRate := {: group <- "Operational" :};
  };   
  equations <-
   {
//     {FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
//      interface.Outflow2[Comp_Index] =
//    - state.InFluxPerComponent[Comp_Index] * (interface.f_Out2);

// THE FOLLOWING CONSTRUCT IS NEEDED ALTOUGH f_Out2 IS A FRACTION AND CANNOT BE LARGER THAN 1 (UPPERBOUND)
// with a controller it is possible to set the fraction f_Out2 larger than 1.
     {FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
      interface.Outflow2[Comp_Index] =
      IF (interface.f_Out2 < 1.0)
    THEN - state.InFluxPerComponent[Comp_Index] * (interface.f_Out2)  
    ELSE - state.InFluxPerComponent[Comp_Index];
   };   
 
     {FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
      interface.Outflow3[Comp_Index] =
      IF ((interface.f_Out2 + interface.f_Out3) < 1.0)
    THEN - state.InFluxPerComponent[Comp_Index] * (interface.f_Out3)
    ELSE - state.InFluxPerComponent[Comp_Index] - interface.Outflow2[Comp_Index];
    };   

     {FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
      interface.Outflow4[Comp_Index] =
      IF ((interface.f_Out2 + interface.f_Out3 + interface.f_Out4) < 1.0)
    THEN - state.InFluxPerComponent[Comp_Index] * (interface.f_Out4)
    ELSE - state.InFluxPerComponent[Comp_Index] - interface.Outflow2[Comp_Index] - interface.Outflow3[Comp_Index];
   };   
 
     {FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
      interface.Outflow5[Comp_Index] =
      IF ((interface.f_Out2 + interface.f_Out3 + interface.f_Out4 + interface.f_Out5) < 1.0)
    THEN - state.InFluxPerComponent[Comp_Index] * (interface.f_Out5)
    ELSE - state.InFluxPerComponent[Comp_Index] - interface.Outflow2[Comp_Index] - interface.Outflow3[Comp_Index] - interface.Outflow4[Comp_Index];
      };   
 
     {FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
      interface.Outflow1[Comp_Index] =
        - state.InFluxPerComponent[Comp_Index] - interface.Outflow2[Comp_Index] - interface.Outflow3[Comp_Index] - interface.Outflow4[Comp_Index] - interface.Outflow5[Comp_Index];
   };  

    state.Q_Out1 = - interface.Outflow1[IndexOfSolvent] * 0.000001;
    state.Q_Out2 = - interface.Outflow2[IndexOfSolvent] * 0.000001;
    state.Q_Out3 = - interface.Outflow3[IndexOfSolvent] * 0.000001;
    state.Q_Out4 = - interface.Outflow4[IndexOfSolvent] * 0.000001;
    state.Q_Out5 = - interface.Outflow5[IndexOfSolvent] * 0.000001;
   }; 

 :};

#endif // WWTP_BASE_SPLITTERS_RELFIVESPLITTER
