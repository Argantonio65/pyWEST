// ------------------------------------------------------------------------
//  MOSTforWATER - Ghent University, BIOMATH
//  Implementation: Code generator Petersen's Matrix
//  Description: MSL-USER/WWTP/VolumeASM2dModTempModel.sensors.msl
// ------------------------------------------------------------------------

#ifdef ASM2dModTemp
	interface.DO = state.C[S_O];
	interface.NH4 = state.C[S_NH];
	interface.NO3 = state.C[S_NO];
	interface.TSS = state.C[X_TSS];
	interface.OnlineCOD = (state.C[S_A] + state.C[S_F] + state.C[S_I] + state.C[X_H] + state.C[X_AUT] + state.C[X_S] + state.C[X_I] + state.C[X_PAO] + state.C[X_PHA]);
	interface.OfflineBOD = parameters.F_BOD_COD * (state.C[S_A] + state.C[S_F] + state.C[X_S] + state.C[X_PHA] + (1 - parameters.f_X_I) * (state.C[X_H] + state.C[X_AUT] + state.C[X_PAO]));
	interface.OnlineTN = (state.C[S_NO] + state.C[S_NH] + parameters.i_N_S_I * state.C[S_I] + parameters.i_N_S_F * state.C[S_F] + parameters.i_N_X_I * state.C[X_I] + parameters.i_N_X_S * state.C[X_S] + parameters.i_N_BM * (state.C[X_H] + state.C[X_AUT] + state.C[X_PAO]));
	interface.OfflineTKN = (state.C[S_NH] + parameters.i_N_S_I * state.C[S_I] + parameters.i_N_S_F * state.C[S_F] + parameters.i_N_X_I * state.C[X_I] + parameters.i_N_X_S * state.C[X_S] + parameters.i_N_BM * (state.C[X_H] + state.C[X_AUT] + state.C[X_PAO]));
	interface.OnlineTP = (state.C[S_PO] + state.C[X_PP] + 0.205 * state.C[X_MEP] + parameters.i_P_S_I * state.C[S_I] + parameters.i_P_S_F * state.C[S_F] + parameters.i_P_X_I * state.C[X_I] + parameters.i_P_X_S * state.C[X_S] + parameters.i_P_BM * (state.C[X_H] + state.C[X_AUT] + state.C[X_PAO]));
	interface.PO4 = state.C[S_PO];
	interface.V_ASU = state.V;
	interface.OUR_ASU =           IF(state.V==0)           THEN 0           ELSE - (state.ConversionTermPerComponent[S_O] / state.V) + parameters.Stoichiometry[Aeration][S_O] * state.Kinetics[Aeration];
	interface.NUR =           IF(state.V==0)           THEN 0           ELSE - (state.ConversionTermPerComponent[S_NO] / state.V) + parameters.Stoichiometry[GrowthOfAuto][S_NO] * state.Kinetics[GrowthOfAuto];
	interface.NPR =           IF(state.V==0)           THEN 0           ELSE parameters.Stoichiometry[GrowthOfAuto][S_NO] * state.Kinetics[GrowthOfAuto];
	interface.AUR =           IF(state.V==0)           THEN 0           ELSE - (state.ConversionTermPerComponent[S_NH] / state.V);
	interface.PUR =           IF(state.V==0)           THEN 0           ELSE - (state.ConversionTermPerComponent[S_PO] / state.V);
	interface.Kla_ASU = state.Kla_Actual;
#endif // ASM2dModTemp
