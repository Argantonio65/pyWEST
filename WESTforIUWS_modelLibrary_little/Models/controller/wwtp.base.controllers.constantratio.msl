/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 23. marts 2012 12:41:30$
 *
 ******************************************************************************/

#ifndef WWTP_BASE_CONTROLLERS_CONSTANTRATIO
#define WWTP_BASE_CONTROLLERS_CONSTANTRATIO

CLASS ConstantRatio
  (* icon = "controller_ratio" *)
  "Ratio controller"

// The value of the manipulated variabele is a ratio of the measured value

  SPECIALISES
  PhysicalDAEModelType :=
  {:
    comments <- "A model for a ratio controller";
    interface <-
    {
      OBJ y_M (* terminal = "in_1"; is_favorite = "1" *) "Sensor measured output" :
               Real := {: causality <- "CIN" ; group <- "Measurement data" :};
      OBJ u (* terminal = "out_1"; is_favorite = "1" *) "Controlled variable" :
               Real := {: causality <- "COUT" ; group <- "Control action" :};
    OBJ ConstantRatio (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Ratio between measured value and controller output" :
        Real := {: causality <- "CIN" ; value <- 1 ; group <- "Operational" :};
    };

    parameters <-
    {
    };

    equations <-
    {

    interface.u = interface.ConstantRatio * interface.y_M;

    };
  :};

CLASS ConstantRatio_double
    (* icon = "controller_ratio" *)
    "Ratio controller with two ratios for two input ranges"
  
    SPECIALISES
    PhysicalDAEModelType :=
    {:
      comments <- "A model for a ratio controller";
      interface <-
      {
        OBJ y_M (* terminal = "in_1" *) "Sensor measured output" :
                 Real := {: causality <- "CIN" ; group <- "Measurement data" :};
        OBJ u (* terminal = "out_1" *) "Controlled variable" :
                 Real := {: causality <- "COUT" ; group <- "Control action" :};
      };
  
      parameters <-
      {
      OBJ ConstantRatio1 "Ratio between measured value and controller output, first input range" :
           Real := {: value <- 1 ; group <- "Operational" :};
      OBJ ConstantRatio2 "Ratio between measured value and controller output, second input range" :
           Real := {: value <- 1 ; group <- "Operational" :};
  	  OBJ y_M_min "Minimumum measured value for first input range" :
           Real := {: value <- 1 ; group <- "Operational" :};
  	  OBJ y_M_mid "Maximum measured value for first input range" :
           Real := {: value <- 1 ; group <- "Operational" :};
      OBJ u_min "Minimum output, calculated as y_M_min*ConstantRatio1" :
           Real := {: value <- 1 ; group <- "Operational" :};
	    OBJ u_max "Maximum output, calculated as y_M_min*ConstantRatio1" :
           Real := {: value <- 1 ; group <- "Operational" :};
      };
  
      equations <-
      {
  
      interface.u = IF (interface.y_M < parameters.y_M_min)
  				  				THEN parameters.u_min
  				  				ELSE IF (interface.y_M < parameters.y_M_mid)
  				  	   				THEN interface.y_M * parameters.ConstantRatio1
  					   					ELSE IF ((parameters.ConstantRatio2 * interface.y_M) < parameters.u_max)
															THEN parameters.ConstantRatio2 * interface.y_M
															ELSE parameters.u_max;
  
      };
  :};

 
#endif // WWTP_BASE_CONTROLLERS_CONSTANTRATIO

