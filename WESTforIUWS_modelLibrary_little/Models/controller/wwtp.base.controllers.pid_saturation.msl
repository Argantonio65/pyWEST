/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 23. marts 2012 12:41:31$
 *
 ******************************************************************************/

#ifndef WWTP_BASE_CONTROLLERS_PIDSATURATION
#define WWTP_BASE_CONTROLLERS_PIDSATURATION

CLASS PID_Saturation
  (* icon = "controller_pid" *)
  "PID controller with saturation"
  SPECIALISES
  PhysicalDAEModelType :=
  {:
    comments <- "A model for a proportional-integral-derivative controller with saturation";
    interface <-
    {
      OBJ y_M (* terminal = "in_1"; is_favorite = "1" *) "Sensor measured output" : 
               Real := {: causality <- "CIN" ; group <- "Measurement data" :};
      OBJ u (* terminal = "out_1"; is_favorite = "1" *) "Controlled variable" : 
               Real := {: causality <- "COUT" ; group <- "Control action" :};
      OBJ K_P (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Factor of proportionality" : 
        Real := {: causality <- "CIN" ; value <- 11.31977725 ; group <- "Operational" :};
      OBJ T_I (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Integral time" : 
        Time := {: causality <- "CIN" ; value <- 0.5062161847 ; group <- "Operational" :};
      OBJ T_D (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Derivative time" : 
        Time := {: causality <- "CIN" ; value <- 0.2531080923 ; group <- "Operational" :};
      OBJ y_S (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Setpoint value for controlled variable" : 
        Real := {: causality <- "CIN" ; value <- 2 ; group <- "Operational" :};
      OBJ u0  (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "No error action" : 
        Real := {: causality <- "CIN" ; value <- 50 ; group <- "Operational" :};
      OBJ u_Min (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Minimum control action" : 
        Real := {: causality <- "CIN" ; value <- 0 ; group <- "Operational" :};
      OBJ u_Max (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Maximum control action" : 
        Real := {: causality <- "CIN" ; value <- 1000 ; group <- "Operational" :};
    };

    parameters <-
    {
    };

    independent <- 
    { 
     OBJ t "Time" : Time := {: group <- "Time" :}; 
    };

    state <-
    {
     OBJ Integ_e "Integral of error": PhysicalQuantityType := {: group <- "Operational" :};
     OBJ e (* is_favorite = "1" *) "Error" : PhysicalQuantityType := {: group <- "Operational" :};
     OBJ help (* hidden = "1" *) " Previous time help variable" : Time;
     OBJ uhelp (* hidden = "1" *) "Help variable to calculate the proportional-integral-derivative control action" : Real;
     OBJ Deriv_e  "Derivative of error" : Real := {: group <- "Operational" :};
     OBJ Prev_t (* hidden = "1" *) : Time;
    };

    equations <-
    {
     state.e = interface.y_S - interface.y_M;

     state.help = independent.t;

   state.Deriv_e = IF (previous(state.help) != state.help)
             THEN (previous(state.e) - state.e) / (previous(state.help) - state.help)
             ELSE previous(state.Deriv_e);  

     DERIV(state.Integ_e, [independent.t]) = state.e ;

     state.uhelp = interface.u0 
           + interface.K_P * (state.e + interface.T_D * state.Deriv_e 
                       + state.Integ_e / interface.T_I); 
                      
     interface.u = IF(state.uhelp < interface.u_Min)
                   THEN (interface.u_Min)
                   ELSE
                     IF (state.uhelp > interface.u_Max)
                     THEN interface.u_Max
                     ELSE state.uhelp;
    };
  :};

 
#endif // WWTP_BASE_CONTROLLERS_PIDSATURATION

