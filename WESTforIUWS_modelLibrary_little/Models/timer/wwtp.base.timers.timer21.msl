/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 23. marts 2012 12:41:35$
 *
 ******************************************************************************/
 
#ifndef WWTP_BASE_TIMERS_TIMER21
#define WWTP_BASE_TIMERS_TIMER21

CLASS Timer21
  (* icon = "timer" ; is_default = "true" *)
  "Timer with 2 periods and 1 output"

// The value of the manipulated variabele changes after a certain time            

  SPECIALISES
  PhysicalDAEModelType :=
  {:
    interface <-
    {
     OBJ u1 (* terminal = "out_1" *) "Controlled variable" : 
               Real := {: causality <- "COUT" ; group <- "Control action" :};
    OBJ u11 (* terminal = "in_2"; manip = "1" *) "Output in the first period" : Real := {: causality <- "CIN" ; value <- 10 ; group <- "Operational" :};
    OBJ u12 (* terminal = "in_2"; manip = "1" *) "Output in the second period" : Real := {: causality <- "CIN" ; value <- 50 ; group <- "Operational" :};    
    OBJ T1 (* terminal = "in_2"; manip = "1" *) "First period" : Time := {:causality <- "CIN" ; value <- 0.125 ; group <- "Operational" :};
    OBJ T2 (* terminal = "in_2"; manip = "1" *) "Second period" : Time := {:causality <- "CIN" ; value <- 0.125 ; group <- "Operational" :};
    };

    parameters <-
    {
    };

    independent <- 
    { 
    OBJ t "Time" : Time := {: group <- "Time" :}; 
    };

    state <-
     {
     OBJ Prev_t (* hidden = "1" *) "Help variable to calculate the begin of each period" : Time ;
     OBJ T "Total cycle" : Time := {: group <- "Operational" :};
     };

    initial <-
    {
    };

    equations <-
    {
    state.T = interface.T1 + interface.T2 ;

    state.Prev_t =  IF  (independent.t - previous(state.Prev_t) < (state.T))
        THEN  previous(state.Prev_t)
        ELSE  previous(state.Prev_t) + state.T;

    interface.u1 = IF (independent.t - state.Prev_t < interface.T1)
      THEN  interface.u11
      ELSE  interface.u12;

    };
  :};

  
#endif // WWTP_BASE_TIMERS_TIMER21
