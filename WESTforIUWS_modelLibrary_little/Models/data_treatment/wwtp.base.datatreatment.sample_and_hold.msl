/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$ EURE
 * $Date: 19. april 2012 10:17:55$
 *
 ******************************************************************************/
 
//  The model has been implemented as defined in Rieger et al. (2003). Further information can be also found in Alex et al. (2009)
//  References:
//  Rieger L., Alex J., Winkler S., Boehler M., Thomann M. and Siegrist H. (2003). Progress in sensor technology - progress in process control? Part I: Sensor property investigation and classification. Water Sci. Technol., 47(2), 103-112.
//  Alex, J., Rieger, L., Corominas, L. and Winkler, S. (2009). Models of Sensors and Actuators. Scientific Technical Report of the IWA Task Group on Benchmarking control strategies. IWA publishing, London, UK.

#ifndef WWTP_BASE_DATATREATMENT_SAMPLEANDHOLD
#define WWTP_BASE_DATATREATMENT_SAMPLEANDHOLD

CLASS Sample_and_Hold
  (* icon = "data_treatment" ; is_default = "true" *)
  "Data Treatment"
  EXTENDS DataTreatment WITH 
  {:
    comments <- "A model for obtaining discrete signal: Zero Order Hold. Sample and Hold (SAH)";
    parameters <-
    {
		OBJ T_interval "Sampling interval": Time := {: value <- 0.00347222222222 ; group <- "System" :};  
    };
    state <-
    {
		OBJ signal_SAH (* hidden = "1" *) "dummy variable for concentration of sample and hold": Real ;
		OBJ prev_SAHst (* hidden = "1" *) "previous SAH sampling time" : Real ;
		OBJ flag_SAH (* hidden = "1" *) "flag for the sampling time": Boolean ;
    };
    initial <-
    {
		state.prev_SAHst = 0;
		state.flag_SAH = 0;
		state.signal_SAH= 0;  
    };
    equations <-
    {
		//timer
		state.prev_SAHst = IF (independent.t - previous(state.prev_SAHst) <= (parameters.T_interval)) THEN  previous(state.prev_SAHst)
			ELSE  previous(state.prev_SAHst) + parameters.T_interval;   

		state.flag_SAH = IF  (state.prev_SAHst != previous(state.prev_SAHst)) THEN  1
			ELSE  0;    
  
		// Calculate the delayed signal depending on the flag value (sample and hold)
		state.signal_SAH = IF (state.flag_SAH) THEN previous(state.signal)
			ELSE IF (independent.t == 0) THEN previous(state.signal)
				 ELSE previous(state.signal_SAH) ;
      
		// Sensor output statement
		interface.y_M = state.signal_SAH ;
    };
  :};
  
#endif // WWTP_BASE_DATATREATMENT_SAMPLEANDHOLD
