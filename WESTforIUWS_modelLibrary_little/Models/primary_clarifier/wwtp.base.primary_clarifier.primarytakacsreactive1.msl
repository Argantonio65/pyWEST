/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 30. marts 2012 15:07:03$
 *
 ******************************************************************************/

#ifndef WWTP_BASE_PRIMARY_CLARIFIER_PRIMARYTAKACSREACTIVE1
#define WWTP_BASE_PRIMARY_CLARIFIER_PRIMARYTAKACSREACTIVE1

#if (defined ASM1Temp)

 CLASS PrimaryTakacsReactive1
 (* icon = "primary_clarifier" *)
 "Layered Takacs clarifier model + fractionation of components"

// This model is an extension on the Takacs model, which was
// developed by Takacs et al. (1991).
// The clarifier is divided in 10 horizontal layers
// (a discretion of the underlying partial differential equations)
// and the mass balance is calculated for each layer and each component (solubles and
// particulates). Flocculation and ammonification are considered as well.
// The novelty of this model is the fact that an expression 
// is proposed for the settling velocity v_S, which is valid 
// for both the thickening and the clarification zone.
//
// Literature : 
// Takacs I., Patry G.G. & Nolasco D. (1991), 
// A dynamic model of the thickening/clarification process,
// Wat. Res., 25, 1263-1271.

 SPECIALISES PhysicalDAEModelType :=
 {:

   interface <-
   {
    OBJ Inflow (* terminal = "in_1" *) "inflow" :
         InWWTPTerminal := {: causality <- "CIN" ; group <- "Influent" :};
    OBJ Overflow (* terminal = "out_1" *) "overflow" :
         OutWWTPTerminal := {: causality <- "COUT" ; group <- "Effluent" :};
    OBJ Underflow (* terminal = "out_2" *) "underflow" :
         OutWWTPTerminal := {: causality <- "COUT" ; group <- "Underflow" :};
    OBJ Sludge_Blanket_Height (* terminal = "out_3"; is_favorite = "1"*) "Height of the sludge blanket" : 
         Length := {: causality <- "COUT" ; group <- "Measurement data":};
    OBJ Q_Under (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Underflow rate" : 
         FlowRate := {: causality <- "CIN" ; value <- 10 ; group <- "Operational" :}; 
//    OBJ Dataflow (* terminal = "out_3" *) "dataflow" :
//         TakacsDataTerminal := {: causality <- "COUT" :};
   };

   parameters <-
   {
   // OBJ WWTPSpecificVolume (* hidden = "1" *) "Specific volume of the components, m^3*g^-1" : SpecificVolumeVector;
    OBJ A (* is_favorite = "1" *) "Surface area of the clarifier" : Area := {: value <- 1500 ; group <- "Dimension" :};
    OBJ H (* is_favorite = "1" *) "Height of the clarifier" : Length := {: value <- 4 ; group <- "Dimension" :};
    OBJ v0 "Maximum theoretical settling velocity" : Velocity := {: value <- 96 ; group <- "Settling" :};
    OBJ v00 "Maximum practical settling velocity" : Velocity := {: value <- 45 ; group <- "Settling" :};
    OBJ r_P "Settling parameter (low concentration)" : SpecificVolume := {: value <- 0.0007 ; group <- "Settling" :};
    OBJ r_H "Settling parameter (hindered settling)" : SpecificVolume := {: value <- 0.00019 ; group <- "Settling" :};
    OBJ f_ns "Non-settleable fraction" : Fraction := {: value <- 0.0024 ; group <- "Settling" :};
    OBJ X_Lim "Minimal concentration in sludge blanket" : Concentration := {: value <- 1000 ; group <- "Settling" :};
    OBJ X_T "Threshold suspended solids concentration" : Concentration := {: value <- 3000 ; group <- "Settling" :};
    OBJ F_TSS_COD (* hidden = "1" *) "Fraction TSS/COD" : Fraction := {: value <- 0.75 ; group <- "Conversion factors" :};
    OBJ k_Floc "Flocculation rate constant" : Rate := {: value <- 0.5 ; group <- "Kinetic" :};
    OBJ k_a "Ammonification rate constant" : Rate := {: value <- 0.5 ; group <- "Kinetic" :};
   };

   state <-
   {
    OBJ IndexOfSludgeBlanket (* hidden = "1" *) "Index of layer top of sludge blanket" : Integer ;
    OBJ H_S "Height of sludge blanket" : Length := {: group <- "Settling" :};
    OBJ X_Min "Non-settleable sludge concentration" : Concentration := {: group <- "Settling" :};
    OBJ X_In (* is_favorite = "1" *) "Influent suspended solids concentration" : Concentration := {: group <- "Concentration" :};
    OBJ X_Out (* is_favorite = "1" *) "Concentration of particulates in the effluent" : Concentration := {: group <- "Concentration" :};
    OBJ X_Under (* is_favorite = "1" *) "Concentration of particulates in the underflow" : Concentration := {: group <- "Concentration" :};
    OBJ X_Layer "Concentration of particulates in a layer" : TakacsConcentrationVector := {: group <- "Concentration" :};
    OBJ C "Concentration for all the components per layer" : LayerConcentrationMatrix := {: group <- "Concentration" :};
    OBJ v_Up (* hidden = "1" *) "Upward bulk velocity" : Velocity ;
    OBJ v_Dn (* hidden = "1" *) "Downward bulk velocity" : Velocity ;
    OBJ v0_P (* hidden = "1" *) "Correction term for non-settleables" : Velocity ;
    OBJ v0_H (* hidden = "1" *) "Correction term for non-settleables" : Velocity ;
    OBJ v_S (* hidden = "1" *) "Static settling velocity" : TakacsVelocityVector;
    OBJ v_S_Help (* hidden = "1" *) "Static settling velocity help term": TakacsVelocityVector;
    OBJ J_Up (* hidden = "1" *) "Upward sludge flux" : TakacsArealFluxVector;
    OBJ J_Dn (* hidden = "1" *) "Downward sludge flux" : TakacsArealFluxVector;
    OBJ J_G (* hidden = "1" *) "Static sludge flux" : TakacsArealFluxVector;
    OBJ J_G_Help (* hidden = "1" *) "Static sludge flux help term": TakacsArealFluxVector;
    OBJ InFluxPerComponent (* hidden = "1" *) "Massflux per component" : MassFluxVector;
    OBJ SolidFlux_In "Sum of massfluxes of particulates" : MassFlux  := {: group <- "Influent characterization" :};
    OBJ SolidConcentration (* hidden = "1" *) "Sum of concentrations of particulates" : Concentration ;
    OBJ Q_In (* is_favorite = "1" *) "Influent flow rate" : FlowRate := {: group <- "Operational" :};
    OBJ Q_Out (* is_favorite = "1" *) "Effluent flow rate" : FlowRate := {: group <- "Operational" :};
    OBJ Q_Under_Actual (* is_favorite = "1" *) "Actual underflow rate" : FlowRate := {: group <- "Operational" :};
    OBJ V_Layer (* hidden = "1" *) "Volume of layer" : Volume ;
    OBJ H_Layer (* hidden = "1" *) "Height of layer" : Length ;
    OBJ D_Out "Dilution rate per layer" : Rate := {: group <- "Settling" :};
    OBJ D_Under "Dilution rate per layer" : Rate := {: group <- "Settling" :};
    OBJ SolidFlux_Out (* hidden = "1" *) "Fraction of influx that goes to the effluent" : MassFlux ;
    OBJ SolidFlux_Under (* hidden = "1" *) "Fraction of influx that goes to the underflow" : MassFlux ;
   };

   initial <-

// Calculation of the volume and the height of a single layer

   {
   // parameters.WWTPSpecificVolume[IndexOfSolvent] := 1e-6;
    state.V_Layer = parameters.A * (parameters.H / NrOfLayers);
    state.H_Layer = parameters.H / NrOfLayers;
   };

  independent <- 
  { 
    OBJ t "Time" : Time := {: group <- "Time" :}; 
   };
   
  equations <-
   {
    state.Q_Under_Actual = IF (state.Q_In <= interface.Q_Under)
         THEN state.Q_In
         ELSE interface.Q_Under;

    state.v_Dn = state.Q_Under_Actual / parameters.A;

    { FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
       state.InFluxPerComponent[Comp_Index] =
       SUMOVER In_Terminal IN {SelectByType(interface,InWWTPTerminal)}:
        In_Terminal[Comp_Index];
    };

    { state.Q_In =
       (0.000001
                * state.InFluxPerComponent[IndexOfSolvent]);
    };

    state.Q_Out = state.Q_In - state.Q_Under_Actual;

// Calculation of the dilution rate in the layers (for upward and downward liquid stream in respective layers)

    state.D_Out = state.Q_Out / state.V_Layer;

    state.D_Under = state.Q_Under_Actual / state.V_Layer;

// Calculation of the particulate flux in the inflow to the primary clarifier

    { state.SolidFlux_In =
       (SUMOVER Comp_Index IN {IndexOfFirstTSSComponent .. IndexOfLastTSSComponent}:
       state.InFluxPerComponent[Comp_Index]) * parameters.F_TSS_COD;
    };

    {state.X_In = IF (state.Q_In == 0)
      THEN 0
      ELSE state.SolidFlux_In / state.Q_In;
     };

// Calculation of the concentration of particulates (as TSS) in each layer of the clarifier

{ FOREACH Layer_Index IN {1 .. NrOfLayers}:
    state.X_Layer[Layer_Index] = ((SUMOVER Comp_Index IN {IndexOfFirstTSSComponent .. IndexOfLastTSSComponent}:
state.C[Comp_Index][Layer_Index]) * parameters.F_TSS_COD);
};

// Calculation of the settling velocities for each layer of the clarifier

    {
     state.SolidConcentration = ( SUMOVER Layer_Index IN {1 .. NrOfLayers}:
                                         state.X_Layer[Layer_Index]) / NrOfLayers;
    };

    state.X_Min = IF (state.Q_In == 0)
      THEN parameters.f_ns * state.SolidConcentration
      ELSE parameters.f_ns * state.SolidFlux_In / state.Q_In ;

    state.v0_P = parameters.v0 * exp(parameters.r_P * state.X_Min);

    state.v0_H = parameters.v0 * exp(parameters.r_H * state.X_Min);

    state.v_Up = state.Q_Out / parameters.A;

    { FOREACH Layer_Index IN {1 .. NrOfLayers}:
       state.v_S_Help[Layer_Index] =
        IF (state.X_Layer[Layer_Index] < state.X_Min)
        THEN 0
        ELSE (state.v0_H * exp( - parameters.r_H * state.X_Layer[Layer_Index])
              - state.v0_P * exp( - parameters.r_P * state.X_Layer[Layer_Index]));
    };

    { FOREACH Layer_Index IN {1 .. NrOfLayers}:
       state.v_S[Layer_Index] =
        (IF (state.v_S_Help[Layer_Index] > parameters.v00)
        THEN parameters.v00
        ELSE state.v_S_Help[Layer_Index]);
    };

    { FOREACH Layer_Index IN {1 .. NrOfLayers}:
       state.J_G_Help[Layer_Index] =
        state.v_S[Layer_Index] * state.X_Layer[Layer_Index];
    };

    { FOREACH Layer_Index IN {2 .. IndexOfFeedLayer}:
       state.J_Up[Layer_Index] =
        state.v_Up * state.X_Layer[Layer_Index];
    };

    { FOREACH Layer_Index IN {IndexOfFeedLayer .. NrOfLayersButOne}:
       state.J_Dn[Layer_Index] =
        state.v_Dn * state.X_Layer[Layer_Index];
    };

    { FOREACH Layer_Index IN {2 .. IndexOfFeedLayer}:
       state.J_G[Layer_Index-1] =
        IF (state.X_Layer[Layer_Index] < parameters.X_T)
        THEN state.J_G_Help[Layer_Index-1]
        ELSE
        IF (state.J_G_Help[Layer_Index-1] > state.J_G_Help[Layer_Index])
        THEN state.J_G_Help[Layer_Index]
        ELSE state.J_G_Help[Layer_Index-1];
    };

    { FOREACH Layer_Index IN {IndexOfFeedLayer .. NrOfLayersButOne}:
       state.J_G[Layer_Index] =
        IF (state.J_G_Help[Layer_Index] > state.J_G_Help[Layer_Index+1])
        THEN state.J_G_Help[Layer_Index+1]
        ELSE state.J_G_Help[Layer_Index] ;
    };

//   Modified Takacs model, calculation of the transport of the soluble fractions in the layers of the clarifier

  //   Mass balances for S_I and S_S, including conversion of S_I to X_I by flocculation
  //   Flocculation depending on X concentration

{ FOREACH Comp_Index IN {IndexOfFirstSolubleComponent .. S_S}:
    { DERIV(state.C[Comp_Index][1],[independent.t]) =
       state.D_Out * (state.C[Comp_Index][2] - state.C[Comp_Index][1])
       - parameters.k_Floc * state.C[Comp_Index][1] * state.X_Layer[1] / parameters.F_TSS_COD;
    };
};

{ FOREACH Comp_Index IN {IndexOfFirstSolubleComponent .. S_S}:
    { FOREACH Layer_Index IN {2 .. NrOfLayersButOne}:
       DERIV(state.C[Comp_Index][Layer_Index],[independent.t]) =
        IF (Layer_Index == IndexOfFeedLayer)
        THEN (1 / state.V_Layer) *
             (state.InFluxPerComponent[Comp_Index] - state.Q_In * state.C[Comp_Index][IndexOfFeedLayer])
             - parameters.k_Floc * state.C[Comp_Index][IndexOfFeedLayer] * state.X_Layer[IndexOfFeedLayer] / parameters.F_TSS_COD
        ELSE
        IF (Layer_Index < IndexOfFeedLayer)
        THEN state.D_Out * (state.C[Comp_Index][Layer_Index+1] - state.C[Comp_Index][Layer_Index])
             - parameters.k_Floc * state.C[Comp_Index][Layer_Index] * state.X_Layer[Layer_Index] / parameters.F_TSS_COD
        ELSE state.D_Under * (state.C[Comp_Index][Layer_Index-1] - state.C[Comp_Index][Layer_Index])
             - parameters.k_Floc * state.C[Comp_Index][Layer_Index] * state.X_Layer[Layer_Index] / parameters.F_TSS_COD;
    };
};

{ FOREACH Comp_Index IN {IndexOfFirstSolubleComponent .. S_S}:
    { DERIV(state.C[Comp_Index][NrOfLayers],[independent.t]) =
       state.D_Under * (state.C[Comp_Index][NrOfLayersButOne] - state.C[Comp_Index][NrOfLayers])
       - parameters.k_Floc * state.C[Comp_Index][NrOfLayers] * state.X_Layer[NrOfLayers] / parameters.F_TSS_COD;
    };
};

  //   Mass balances for S_O

   { DERIV(state.C[S_O][1],[independent.t]) =
       state.D_Out * (state.C[S_O][2] - state.C[S_O][1]);
    };

    { FOREACH Layer_Index IN {2 .. NrOfLayersButOne}:
       DERIV(state.C[S_O][Layer_Index],[independent.t]) =
        IF (Layer_Index == IndexOfFeedLayer)
        THEN (1 / state.V_Layer) *
             (state.InFluxPerComponent[S_O]
       - state.Q_In * state.C[S_O][IndexOfFeedLayer])
        ELSE
        IF (Layer_Index < IndexOfFeedLayer)
        THEN state.D_Out *
     (state.C[S_O][Layer_Index+1] - state.C[S_O][Layer_Index])
        ELSE state.D_Under *
         (state.C[S_O][Layer_Index-1] - state.C[S_O][Layer_Index]);
    };

    { DERIV(state.C[S_O][NrOfLayers],[independent.t]) =
       state.D_Under * (state.C[S_O][NrOfLayersButOne] - state.C[S_O][NrOfLayers]);
    };
  //   Mass balances for S_NO

   { DERIV(state.C[S_NO][1],[independent.t]) =
       state.D_Out * (state.C[S_NO][2] - state.C[S_NO][1]);
    };

    { FOREACH Layer_Index IN {2 .. NrOfLayersButOne}:
       DERIV(state.C[S_NO][Layer_Index],[independent.t]) =
        IF (Layer_Index == IndexOfFeedLayer)
        THEN (1 / state.V_Layer) *
             (state.InFluxPerComponent[S_NO]
       - state.Q_In * state.C[S_NO][IndexOfFeedLayer])
        ELSE
        IF (Layer_Index < IndexOfFeedLayer)
        THEN state.D_Out *
     (state.C[S_NO][Layer_Index+1] - state.C[S_NO][Layer_Index])
        ELSE state.D_Under *
         (state.C[S_NO][Layer_Index-1] - state.C[S_NO][Layer_Index]);
    };

    { DERIV(state.C[S_NO][NrOfLayers],[independent.t]) =
       state.D_Under * (state.C[S_NO][NrOfLayersButOne] - state.C[S_NO][NrOfLayers]);
    };

//   Mass balances for S_NH, including formation of S_NH due to ammonification of S_ND

    { DERIV(state.C[S_NH][1],[independent.t]) =
       state.D_Out * (state.C[S_NH][2] - state.C[S_NH][1])
      + parameters.k_a * state.C[S_ND][1];
    };

    { FOREACH Layer_Index IN {2 .. NrOfLayersButOne}:
       DERIV(state.C[S_NH][Layer_Index],[independent.t]) =
        IF (Layer_Index == IndexOfFeedLayer)
        THEN (1 / state.V_Layer) *
             (state.InFluxPerComponent[S_NH] - state.Q_In * state.C[S_NH][IndexOfFeedLayer])
             + parameters.k_a * state.C[S_ND][IndexOfFeedLayer]
        ELSE
        IF (Layer_Index < IndexOfFeedLayer)
        THEN state.D_Out * (state.C[S_NH][Layer_Index+1] - state.C[S_NH][Layer_Index])
             + parameters.k_a * state.C[S_ND][Layer_Index]
        ELSE state.D_Under * (state.C[S_NH][Layer_Index-1] - state.C[S_NH][Layer_Index])
             + parameters.k_a * state.C[S_ND][Layer_Index];
    };

    { DERIV(state.C[S_NH][NrOfLayers],[independent.t]) =
       state.D_Under * (state.C[S_NH][NrOfLayersButOne] - state.C[S_NH][NrOfLayers])
       + parameters.k_a * state.C[S_ND][NrOfLayers];
    };

  //   Mass balances for S_ND, including conversion of S_ND to S_NH by ammonification

    { DERIV(state.C[S_ND][1],[independent.t]) =
       state.D_Out * (state.C[S_ND][2] - state.C[S_ND][1])
       - parameters.k_a * state.C[S_ND][1];
    };

    { FOREACH Layer_Index IN {2 .. NrOfLayersButOne}:
       DERIV(state.C[S_ND][Layer_Index],[independent.t]) =
        IF (Layer_Index == IndexOfFeedLayer)
        THEN (1 / state.V_Layer) *
             (state.InFluxPerComponent[S_ND] - state.Q_In * state.C[S_ND][IndexOfFeedLayer])
             - parameters.k_a * state.C[S_ND][IndexOfFeedLayer]
        ELSE
        IF (Layer_Index < IndexOfFeedLayer)
        THEN state.D_Out * (state.C[S_ND][Layer_Index+1] - state.C[S_ND][Layer_Index])
             - parameters.k_a * state.C[S_ND][Layer_Index]
        ELSE state.D_Under * (state.C[S_ND][Layer_Index-1] - state.C[S_ND][Layer_Index])
             - parameters.k_a * state.C[S_ND][Layer_Index];
    };

    { DERIV(state.C[S_ND][NrOfLayers],[independent.t]) =
       state.D_Under * (state.C[S_ND][NrOfLayersButOne] - state.C[S_ND][NrOfLayers])
       - parameters.k_a * state.C[S_ND][NrOfLayers];
    };

  //   Mass balances for S_ALK
   { DERIV(state.C[S_ALK][1],[independent.t]) =
       state.D_Out * (state.C[S_ALK][2] - state.C[S_ALK][1]);
    };

    { FOREACH Layer_Index IN {2 .. NrOfLayersButOne}:
       DERIV(state.C[S_ALK][Layer_Index],[independent.t]) =
        IF (Layer_Index == IndexOfFeedLayer)
        THEN (1 / state.V_Layer) *
             (state.InFluxPerComponent[S_ALK]
       - state.Q_In * state.C[S_ALK][IndexOfFeedLayer])
        ELSE
        IF (Layer_Index < IndexOfFeedLayer)
        THEN state.D_Out *
     (state.C[S_ALK][Layer_Index+1] - state.C[S_ALK][Layer_Index])
        ELSE state.D_Under *
         (state.C[S_ALK][Layer_Index-1] - state.C[S_ALK][Layer_Index]);
    };

    { DERIV(state.C[S_ALK][NrOfLayers],[independent.t]) =
       state.D_Under * (state.C[S_ALK][NrOfLayersButOne] - state.C[S_ALK][NrOfLayers]);
    };

//   Modified Takacs model, calculation of the mass balances for the particulate fractions in all the layers

  //   Mass balances for X_I, including formation of X_I due to flocculation of S_I
  //   Flocculation depending on X concentration

{ DERIV(state.C[X_I][1],[independent.t]) =
       (1 / state.H_Layer) * (state.J_Up[2] * state.C[X_I][2] / state.X_Layer[2]
       - state.J_G[1] * state.C[X_I][1] / state.X_Layer[1]) - state.D_Out * state.C[X_I][1]
       + parameters.k_Floc * state.C[S_I][1] * state.X_Layer[1] / parameters.F_TSS_COD;
    };

    { FOREACH Layer_Index IN {2 .. NrOfLayersButOne}:
       DERIV(state.C[X_I][Layer_Index],[independent.t]) =
        IF (Layer_Index == IndexOfFeedLayer)
        THEN (1 / state.H_Layer) *
             (state.J_G[Layer_Index-1] * state.C[X_I][Layer_Index-1] / state.X_Layer[Layer_Index-1]
             - (state.J_G[Layer_Index] + state.J_Up[Layer_Index] + state.J_Dn[Layer_Index])
             * state.C[X_I][Layer_Index] / state.X_Layer[Layer_Index])
             + (1 / state.V_Layer) * state.InFluxPerComponent[X_I]
             + parameters.k_Floc * state.C[S_I][Layer_Index] * state.X_Layer[Layer_Index] / parameters.F_TSS_COD
        ELSE (1 / state.H_Layer) *
             ((state.J_G[Layer_Index-1] + state.J_Dn[Layer_Index-1])
             * state.C[X_I][Layer_Index-1] / state.X_Layer[Layer_Index-1]
             + state.J_Up[Layer_Index+1] * state.C[X_I][Layer_Index+1] / state.X_Layer[Layer_Index+1]
             - (state.J_G[Layer_Index] + state.J_Dn[Layer_Index] + state.J_Up[Layer_Index])
             * state.C[X_I][Layer_Index] / state.X_Layer[Layer_Index])
             + parameters.k_Floc * state.C[S_I][Layer_Index] * state.X_Layer[Layer_Index] / parameters.F_TSS_COD;
    };

    { DERIV(state.C[X_I][NrOfLayers],[independent.t]) =
       (1 / state.H_Layer) * (state.J_Dn[NrOfLayersButOne] + state.J_G[NrOfLayersButOne])
       * state.C[X_I][NrOfLayersButOne] / state.X_Layer[NrOfLayersButOne]
       - state.D_Under * state.C[X_I][NrOfLayers]
       + parameters.k_Floc * state.C[S_I][NrOfLayers] * state.X_Layer[NrOfLayers] / parameters.F_TSS_COD;
    };

  //   Mass balances for X_S, including formation of X_S due to flocculation of S_S
  //   Flocculation depending on X concentration

{ DERIV(state.C[X_S][1],[independent.t]) =
       (1 / state.H_Layer) * (state.J_Up[2] * state.C[X_S][2] / state.X_Layer[2]
       - state.J_G[1] * state.C[X_S][1] / state.X_Layer[1]) - state.D_Out * state.C[X_S][1]
       + parameters.k_Floc * state.C[S_S][1] * state.X_Layer[1] / parameters.F_TSS_COD;
    };

    { FOREACH Layer_Index IN {2 .. NrOfLayersButOne}:
       DERIV(state.C[X_S][Layer_Index],[independent.t]) =
        IF (Layer_Index == IndexOfFeedLayer)
        THEN (1 / state.H_Layer) *
             (state.J_G[Layer_Index-1] * state.C[X_S][Layer_Index-1] / state.X_Layer[Layer_Index-1]
             - (state.J_G[Layer_Index] + state.J_Up[Layer_Index] + state.J_Dn[Layer_Index])
             * state.C[X_S][Layer_Index] / state.X_Layer[Layer_Index])
             + (1 / state.V_Layer) * state.InFluxPerComponent[X_S]
             + parameters.k_Floc * state.C[S_S][Layer_Index] * state.X_Layer[Layer_Index] / parameters.F_TSS_COD
        ELSE (1 / state.H_Layer) *
             ((state.J_G[Layer_Index-1] + state.J_Dn[Layer_Index-1])
             * state.C[X_S][Layer_Index-1] / state.X_Layer[Layer_Index-1]
             + state.J_Up[Layer_Index+1] * state.C[X_S][Layer_Index+1] / state.X_Layer[Layer_Index+1]
             - (state.J_G[Layer_Index] + state.J_Dn[Layer_Index] + state.J_Up[Layer_Index])
             * state.C[X_S][Layer_Index] / state.X_Layer[Layer_Index])
             + parameters.k_Floc * state.C[S_S][Layer_Index] * state.X_Layer[Layer_Index] / parameters.F_TSS_COD;
    };

    { DERIV(state.C[X_S][NrOfLayers],[independent.t]) =
       (1 / state.H_Layer) * (state.J_Dn[NrOfLayersButOne] + state.J_G[NrOfLayersButOne])
       * state.C[X_S][NrOfLayersButOne] / state.X_Layer[NrOfLayersButOne]
       - state.D_Under * state.C[X_S][NrOfLayers]
       + parameters.k_Floc * state.C[S_S][NrOfLayers] * state.X_Layer[NrOfLayers] / parameters.F_TSS_COD;
    };

  //   Mass balances for X_BH

  { DERIV(state.C[X_BH][1],[independent.t]) =
       (1 / state.H_Layer) * (state.J_Up[2] * state.C[X_BH][2] / state.X_Layer[2]
       - state.J_G[1] * state.C[X_BH][1] / state.X_Layer[1]) - state.D_Out * state.C[X_BH][1];
    };

    { FOREACH Layer_Index IN {2 .. NrOfLayersButOne}:
       DERIV(state.C[X_BH][Layer_Index],[independent.t]) =
        IF (Layer_Index == IndexOfFeedLayer)
        THEN (1 / state.H_Layer) *
             (state.J_G[Layer_Index-1] * state.C[X_BH][Layer_Index-1] / state.X_Layer[Layer_Index-1]
             - (state.J_G[Layer_Index] + state.J_Up[Layer_Index] + state.J_Dn[Layer_Index])
             * state.C[X_BH][Layer_Index] / state.X_Layer[Layer_Index])
             + (1 / state.V_Layer) * state.InFluxPerComponent[X_BH]
        ELSE (1 / state.H_Layer) *
             ((state.J_G[Layer_Index-1] + state.J_Dn[Layer_Index-1])
             * state.C[X_BH][Layer_Index-1] / state.X_Layer[Layer_Index-1]
             + state.J_Up[Layer_Index+1] * state.C[X_BH][Layer_Index+1] / state.X_Layer[Layer_Index+1]
             - (state.J_G[Layer_Index] + state.J_Dn[Layer_Index] + state.J_Up[Layer_Index])
             * state.C[X_BH][Layer_Index] / state.X_Layer[Layer_Index]);
    };

   { DERIV(state.C[X_BH][NrOfLayers],[independent.t]) =
       (1 / state.H_Layer) * (state.J_Dn[NrOfLayersButOne] + state.J_G[NrOfLayersButOne])
       * state.C[X_BH][NrOfLayersButOne] / state.X_Layer[NrOfLayersButOne]
       - state.D_Under * state.C[X_BH][NrOfLayers];
    };

  //   Mass balances for X_BA

  { DERIV(state.C[X_BA][1],[independent.t]) =
       (1 / state.H_Layer) * (state.J_Up[2] * state.C[X_BA][2] / state.X_Layer[2]
       - state.J_G[1] * state.C[X_BA][1] / state.X_Layer[1]) - state.D_Out * state.C[X_BA][1];
    };

    { FOREACH Layer_Index IN {2 .. NrOfLayersButOne}:
       DERIV(state.C[X_BA][Layer_Index],[independent.t]) =
        IF (Layer_Index == IndexOfFeedLayer)
        THEN (1 / state.H_Layer) *
             (state.J_G[Layer_Index-1] * state.C[X_BA][Layer_Index-1] / state.X_Layer[Layer_Index-1]
             - (state.J_G[Layer_Index] + state.J_Up[Layer_Index] + state.J_Dn[Layer_Index])
             * state.C[X_BA][Layer_Index] / state.X_Layer[Layer_Index])
             + (1 / state.V_Layer) * state.InFluxPerComponent[X_BA]
        ELSE (1 / state.H_Layer) *
             ((state.J_G[Layer_Index-1] + state.J_Dn[Layer_Index-1])
             * state.C[X_BA][Layer_Index-1] / state.X_Layer[Layer_Index-1]
             + state.J_Up[Layer_Index+1] * state.C[X_BA][Layer_Index+1] / state.X_Layer[Layer_Index+1]
             - (state.J_G[Layer_Index] + state.J_Dn[Layer_Index] + state.J_Up[Layer_Index])
             * state.C[X_BA][Layer_Index] / state.X_Layer[Layer_Index]);
    };

   { DERIV(state.C[X_BA][NrOfLayers],[independent.t]) =
       (1 / state.H_Layer) * (state.J_Dn[NrOfLayersButOne] + state.J_G[NrOfLayersButOne])
       * state.C[X_BA][NrOfLayersButOne] / state.X_Layer[NrOfLayersButOne]
       - state.D_Under * state.C[X_BA][NrOfLayers];
    };

//   Mass balances for X_P

  { DERIV(state.C[X_P][1],[independent.t]) =
       (1 / state.H_Layer) * (state.J_Up[2] * state.C[X_P][2] / state.X_Layer[2]
       - state.J_G[1] * state.C[X_P][1] / state.X_Layer[1]) - state.D_Out * state.C[X_P][1];
    };

    { FOREACH Layer_Index IN {2 .. NrOfLayersButOne}:
       DERIV(state.C[X_P][Layer_Index],[independent.t]) =
        IF (Layer_Index == IndexOfFeedLayer)
        THEN (1 / state.H_Layer) *
             (state.J_G[Layer_Index-1] * state.C[X_P][Layer_Index-1] / state.X_Layer[Layer_Index-1]
             - (state.J_G[Layer_Index] + state.J_Up[Layer_Index] + state.J_Dn[Layer_Index])
             * state.C[X_P][Layer_Index] / state.X_Layer[Layer_Index])
             + (1 / state.V_Layer) * state.InFluxPerComponent[X_P]
        ELSE (1 / state.H_Layer) *
             ((state.J_G[Layer_Index-1] + state.J_Dn[Layer_Index-1])
             * state.C[X_P][Layer_Index-1] / state.X_Layer[Layer_Index-1]
             + state.J_Up[Layer_Index+1] * state.C[X_P][Layer_Index+1] / state.X_Layer[Layer_Index+1]
             - (state.J_G[Layer_Index] + state.J_Dn[Layer_Index] + state.J_Up[Layer_Index])
             * state.C[X_P][Layer_Index] / state.X_Layer[Layer_Index]);
    };

   { DERIV(state.C[X_P][NrOfLayers],[independent.t]) =
       (1 / state.H_Layer) * (state.J_Dn[NrOfLayersButOne] + state.J_G[NrOfLayersButOne])
       * state.C[X_P][NrOfLayersButOne] / state.X_Layer[NrOfLayersButOne]
       - state.D_Under * state.C[X_P][NrOfLayers];
    };

  //   Mass balances for X_ND

    { DERIV(state.C[X_ND][1],[independent.t]) =
       (1 / state.H_Layer) * (state.J_Up[2] * state.C[X_ND][2] / state.X_Layer[2]
       - state.J_G[1] * state.C[X_ND][1] / state.X_Layer[1]) - state.D_Out * state.C[X_ND][1];
    };

    { FOREACH Layer_Index IN {2 .. NrOfLayersButOne}:
       DERIV(state.C[X_ND][Layer_Index],[independent.t]) =
        IF (Layer_Index == IndexOfFeedLayer)
        THEN (1 / state.H_Layer) *
             (state.J_G[Layer_Index-1] * state.C[X_ND][Layer_Index-1] / state.X_Layer[Layer_Index-1]
             - (state.J_G[Layer_Index] + state.J_Up[Layer_Index] + state.J_Dn[Layer_Index])
             * state.C[X_ND][Layer_Index] / state.X_Layer[Layer_Index])
             + (1 / state.V_Layer) * state.InFluxPerComponent[X_ND]
        ELSE (1 / state.H_Layer) *
             ((state.J_G[Layer_Index-1] + state.J_Dn[Layer_Index-1])
             * state.C[X_ND][Layer_Index-1] / state.X_Layer[Layer_Index-1]
             + state.J_Up[Layer_Index+1] * state.C[X_ND][Layer_Index+1] / state.X_Layer[Layer_Index+1]
             - (state.J_G[Layer_Index] + state.J_Dn[Layer_Index] + state.J_Up[Layer_Index])
             * state.C[X_ND][Layer_Index] / state.X_Layer[Layer_Index]);
    };

    { DERIV(state.C[X_ND][NrOfLayers],[independent.t]) =
       (1 / state.H_Layer) * (state.J_Dn[NrOfLayersButOne] + state.J_G[NrOfLayersButOne])
       * state.C[X_ND][NrOfLayersButOne] / state.X_Layer[NrOfLayersButOne]
       - state.D_Under * state.C[X_ND][NrOfLayers];
    };

    state.X_Out = IF (state.Q_Out == 0)
      THEN 0
      ELSE state.X_Layer[1];

    state.X_Under = IF (state.Q_Under_Actual == 0)
        THEN 0
        ELSE state.X_Layer[NrOfLayers];

// Calculation of the height of the sludge blanket

    state.IndexOfSludgeBlanket =
     MSLUFindThreshold(ref(state.X_Layer[1]),NrOfLayers,parameters.X_Lim);

    state.H_S = (NrOfLayers - state.IndexOfSludgeBlanket + 1) *
                state.H_Layer;

// Calculation of the fluxes of all components in the effluent

    state.SolidFlux_Out = state.X_Out * state.Q_Out ;

    interface.Overflow[IndexOfSolvent] = -state.Q_Out / 0.000001;

// New Takacs equations in which the effluent fractions are the concentrations calculated for the top
// layer of the clarifier

{ FOREACH Comp_Index IN {IndexOfFirstSolubleComponent .. NrOfComponents}:
    interface.Overflow[Comp_Index] = - state.C[Comp_Index][1] * state.Q_Out ;
};

    state.SolidFlux_Under = state.X_Under * state.Q_Under_Actual;

    interface.Underflow[IndexOfSolvent] = - state.Q_Under_Actual / 0.000001;

// New Takacs equations in which the effluent soluble fractions are the concentrations calculated for the bottom
// layer of the clarifier

{ FOREACH Comp_Index IN {IndexOfFirstSolubleComponent .. NrOfComponents}:
    interface.Underflow[Comp_Index] = - state.C[Comp_Index][NrOfLayers] * state.Q_Under_Actual;
};

    interface.Sludge_Blanket_Height = state.H_S;

   };

 :};

#endif //ASM1Temp

#endif // WWTP_BASE_PRIMARY_CLARIFIER_PRIMARYTAKACSREACTIVE1

