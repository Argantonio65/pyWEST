/*******************************************************************************
 *
 * Tornado - Advanced Kernel for Modeling and Virtual Experimentation
 * (c) Copyright 2004-2011 DHI
 *
 * This file is provided under the terms of a license and may not be
 * distributed and/or modified except where allowed by that license.
 *
 * This file is provided as is with no warranty of any kind, including the
 * warranty of design, merchantability and fitness for a particular purpose.
 *
 * $Revision: 1$
 * $Date: 17. april 2012 11:18:00$
 *
 ******************************************************************************/

#ifndef WWTP_BASE_PRIMARY_CLARIFIER_PRIMARYTAKACSSOLUBLESPROPAGATOR
#define WWTP_BASE_PRIMARY_CLARIFIER_PRIMARYTAKACSSOLUBLESPROPAGATOR

#if (defined ASM1Temp)
//=========================================================================
//===================Takacs Solubles propagator model======================
//=========================================================================

// This Takacs model performs mass balance for solubles around each layer
// of the clarifier.

 CLASS PrimaryTakacsSolublesPropagator
 (* icon = "primary_clarifier" *)
 "Takacs Solubles Propagator for primary clarifiers"

// This model was developed by Takacs et al. (1991). The novelty of this model 
// is the fact that an expression is proposed for the settling velocity v_S 
// which is valid for both the thickening and the clarification zone. 
// In the upper layers, v_S can be related to X through a double exponential 
// function due to the operational constraints of the clarifiers. 
// The clarifier is divided in 10 horizontal layers and the mass balance 
// is calculated for each layer.  
// 
// Literature : 
// Takacs I., Patry G.G. & Nolasco D. (1991), 
// A dynamic model of the thickening/clarification process,
// Wat. Res., 25, 1263-1271.
//
// Coderre, A. (1999) 
// Simulation du comportement des decanteurs primaires de Valcartier: 
// Evaluation du modele de Takacs et al. (1991),
// Essai de maitrise, Universite Laval, Quebec.

 SPECIALISES PhysicalDAEModelType :=
 {:

   interface <-
   { 
    OBJ Inflow (* terminal = "in_1" *) "inflow" : 
         InWWTPTerminal := {: causality <- "CIN" ; group <- "Influent" :};
    OBJ Overflow (* terminal = "out_1" *) "overflow" : 
         OutWWTPTerminal := {: causality <- "COUT" ; group <- "Effluent" :};
    OBJ Underflow (* terminal = "out_2" *) "underflow" : 
         OutWWTPTerminal := {: causality <- "COUT" ; group <- "Underflow" :};
    OBJ Sludge_Blanket_Height (* terminal = "out_3"; is_favorite = "1" *) "Height of the sludge blanket" : 
        Length := {: causality <- "COUT" ; group <- "Measurement data" :};
    OBJ Q_Under (* terminal = "in_2"; manip = "1"; is_favorite = "1" *) "Underflow rate" : 
    FlowRate := {: causality <- "CIN" ; value <- 10 ; group <- "Operational" :};  
   };

   parameters <- 
   {     
  //  OBJ WWTPSpecificVolume (* hidden = "1" *) "Specific volume of the components" : SpecificVolumeVector;
    OBJ A (* is_favorite = "1" *) "Surface area of the clarifier" : Area := {: value <- 1500 ; group <- "Dimension" :};
    OBJ H (* is_favorite = "1" *) "Height of the clarifier" : Length := {: value <- 4 ; group <- "Dimension" :};
    OBJ v0 "Maximum theoretical settling velocity" : Velocity := {: value <- 96 ; group <- "Settling" :};
    OBJ v00 "Maximum practical settling velocity" : Velocity := {: value <- 45 ; group <- "Settling" :};  
    OBJ r_P "Settling parameter (low concentration)" : SpecificVolume := {: value <- 0.0007 ; group <- "Settling" :};
    OBJ r_H "Settling parameter (hindered settling)" : SpecificVolume := {: value <- 0.00019 ; group <- "Settling" :}; 
    OBJ f_ns "Non-settleable fraction" : Fraction := {: value <- 0.24 ; group <- "Settling" :};
    OBJ X_Lim "Minimal concentration in sludge blanket" : Concentration := {: value <- 900 ; group <- "Settling" :};
    OBJ X_T "Threshold suspended solids concentration" : Concentration := {: value <- 3000 ; group <- "Settling" :};
    OBJ F_TSS_COD "Fraction TSS/COD" : Fraction := {: value <- 0.75 ; group <- "Conversion factors" :}; 
   };

   state <-
   {
    OBJ IndexOfSludgeBlanket (* hidden = "1" *) "Index of layer top of sludge blanket" : Integer ;
    OBJ H_S "Height of sludge blanket" : Length  := {: group <- "Settling" :}; 
    OBJ X_Min "Non-settleable sludge concentration" : Concentration  := {: group <- "Settling" :};  
    OBJ X_In (* is_favorite = "1" *) "Influent suspended solids concentration" : Concentration  := {: group <- "Concentration" :};
    OBJ X_Out (* is_favorite = "1" *) "Effluent suspended solids concentration" : Concentration  := {: group <- "Concentration" :}; 
    OBJ X_Under (* is_favorite = "1" *) "Underflow suspended solids concentration" : Concentration  := {: group <- "Concentration" :};   
    OBJ X_Layer "Vector containing concentration of particulates for all the layers" : TakacsConcentrationVector := {: group <- "Concentration" :};
    OBJ S_I_Layer "Vector containing concentration of S_I for all layers" : TakacsConcentrationVector := {: group <- "Concentration" :};
    OBJ S_S_Layer "Vector containing concentration of S_S for all layers" : TakacsConcentrationVector := {: group <- "Concentration" :};
    OBJ S_O_Layer "Vector containing concentration of S_O for all layers" : TakacsConcentrationVector := {: group <- "Concentration" :};
    OBJ S_NO_Layer "Vector containing concentration of S_NO for all layers" : TakacsConcentrationVector := {: group <- "Concentration" :};
    OBJ S_NH_Layer "Vector containing concentration of S_NH for all layers" : TakacsConcentrationVector := {: group <- "Concentration" :};
    OBJ S_ND_Layer "Vector containing concentration of S_ND for all layers" : TakacsConcentrationVector := {: group <- "Concentration" :};
    OBJ S_ALK_Layer "Vector containing concentration of S_ALK for all layers" : TakacsConcentrationVector := {: group <- "Concentration" :};
    OBJ v_Up (* hidden = "1" *) "Upward bulk velocity" : Velocity ; 
    OBJ v_Dn (* hidden = "1" *) "Downward bulk velocity" : Velocity ;
    OBJ v0_P (* hidden = "1" *) "Correction term for non-settleables" : Velocity ;
    OBJ v0_H (* hidden = "1" *) "Correction term for non-settleables" : Velocity ; 
    OBJ v_S (* hidden = "1" *) "Static settling velocity" : TakacsVelocityVector;
    OBJ v_S_Help (* hidden = "1" *) "Static settling velocity help term": TakacsVelocityVector;
    OBJ J_Up (* hidden = "1" *) "Upward sludge flux" : TakacsArealFluxVector;
    OBJ J_Dn (* hidden = "1" *) "Downward sludge flux" : TakacsArealFluxVector;
    OBJ J_G (* hidden = "1" *) "Static sludge flux" : TakacsArealFluxVector;
    OBJ J_G_Help (* hidden = "1" *) "Static sludge flux": TakacsArealFluxVector;
    OBJ InFluxPerComponent (* hidden = "1" *) "Massflux per component" : MassFluxVector;
    OBJ SolidFlux_In (* hidden = "1" *) "Sum of massfluxes of particulates" : MassFlux ;
    OBJ SolidConcentration (* hidden = "1" *) "Sum of concentrations of particulates" : Concentration ;
    OBJ Q_In (* is_favorite = "1" *) "Influent flow rate" : FlowRate  := {: group <- "Operational" :};
    OBJ Q_Out (* is_favorite = "1" *) "Effluent flow rate" : FlowRate  := {: group <- "Operational" :};
    OBJ Q_Under_Actual (* is_favorite = "1" *) "Actual underflow rate" : FlowRate := {: group <- "Operational" :};
    OBJ V_Layer (* hidden = "1" *) "Volume of the layers" : Volume ;  
    OBJ H_Layer (* hidden = "1" *) "Height of the layers" : Length ;
    OBJ SolidFlux_Out (* hidden = "1" *) "Fraction of influx that goes to the effluent" : MassFlux ;
    OBJ SolidFlux_Under (* hidden = "1" *) "Fraction of influx that goes to the underflow" : MassFlux ;

   };

  independent <- 
  { 
    OBJ t "Time" : Time := {: group <- "Time" :}; 
   };
   
   initial <-
   {
    //parameters.WWTPSpecificVolume[IndexOfSolvent] := 1e-6;
    state.V_Layer = parameters.A * (parameters.H / NrOfLayers); 
    state.H_Layer = parameters.H / NrOfLayers;
   };

  equations <-
   {
    state.Q_Under_Actual = IF (state.Q_In <= interface.Q_Under)
         THEN state.Q_In
         ELSE interface.Q_Under;

    state.v_Dn = state.Q_Under_Actual / parameters.A; 

    { FOREACH Comp_Index IN {IndexOfSolvent .. NrOfComponents}:
       state.InFluxPerComponent[Comp_Index] =
       SUMOVER In_Terminal IN {SelectByType(interface,InWWTPTerminal)}:
        In_Terminal[Comp_Index]; 
    };

    { state.Q_In = 
       (0.000001 
                * state.InFluxPerComponent[IndexOfSolvent]);
    };

    state.Q_Out = state.Q_In - state.Q_Under_Actual ; 

    { 
     state.SolidFlux_In =
       (SUMOVER Comp_Index IN {IndexOfFirstTSSComponent .. IndexOfLastTSSComponent}:
       state.InFluxPerComponent[Comp_Index]) * parameters.F_TSS_COD ;
    };

    {state.X_In = IF (state.Q_In == 0)
      THEN 0
      ELSE state.SolidFlux_In / state.Q_In;
     };

    {
     state.SolidConcentration = ( SUMOVER Layer_Index IN {1 .. NrOfLayers}:
                                         state.X_Layer[Layer_Index]) / NrOfLayers;
    };

    state.X_Min = IF (state.Q_In == 0)
      THEN parameters.f_ns * state.SolidConcentration
      ELSE parameters.f_ns * state.SolidFlux_In / state.Q_In ;

    state.v0_P = parameters.v0 * exp(parameters.r_P * state.X_Min);

    state.v0_H = parameters.v0 * exp(parameters.r_H * state.X_Min); 

    state.v_Up = state.Q_Out / parameters.A; 

    { FOREACH Layer_Index IN {1 .. NrOfLayers}:
       state.v_S_Help[Layer_Index] =
        IF (state.X_Layer[Layer_Index] < state.X_Min) 
        THEN 0 
        ELSE (state.v0_H * exp( - parameters.r_H * state.X_Layer[Layer_Index]) 
              - state.v0_P * exp( - parameters.r_P * state.X_Layer[Layer_Index]));
    };

    { FOREACH Layer_Index IN {1 .. NrOfLayers}:
       state.v_S[Layer_Index] =
        (IF (state.v_S_Help[Layer_Index] > parameters.v00)
        THEN parameters.v00
        ELSE state.v_S_Help[Layer_Index]);
    }; 
        
    { FOREACH Layer_Index IN {1 .. NrOfLayers}:
       state.J_G_Help[Layer_Index] =
        state.v_S[Layer_Index] * state.X_Layer[Layer_Index];
    };

    { FOREACH Layer_Index IN {2 .. IndexOfFeedLayer}:
       state.J_Up[Layer_Index] =
        state.v_Up * state.X_Layer[Layer_Index];
    };

    { FOREACH Layer_Index IN {IndexOfFeedLayer .. NrOfLayersButOne}:
       state.J_Dn[Layer_Index] =
        state.v_Dn * state.X_Layer[Layer_Index];
    };

    { FOREACH Layer_Index IN {2 .. IndexOfFeedLayer}:
       state.J_G[Layer_Index-1] =
        IF (state.X_Layer[Layer_Index] < parameters.X_T)
        THEN state.J_G_Help[Layer_Index-1]
        ELSE
         IF (state.J_G_Help[Layer_Index-1] > state.J_G_Help[Layer_Index])
         THEN state.J_G_Help[Layer_Index]
         ELSE state.J_G_Help[Layer_Index-1];
    };

    { FOREACH Layer_Index IN {IndexOfFeedLayer .. NrOfLayersButOne}:
       state.J_G[Layer_Index] =
        IF (state.J_G_Help[Layer_Index] > state.J_G_Help[Layer_Index+1])
        THEN state.J_G_Help[Layer_Index+1]
        ELSE state.J_G_Help[Layer_Index] ;
    };

    { DERIV(state.X_Layer[1],[independent.t]) =
       (1 / state.H_Layer) * (state.J_Up[2] - state.J_G[1]) -
       (state.Q_Out / state.V_Layer) * state.X_Layer[1];
    };
 
    { FOREACH Layer_Index IN {2 .. NrOfLayersButOne}:
       DERIV(state.X_Layer[Layer_Index],[independent.t]) =
        IF (Layer_Index == IndexOfFeedLayer)
        THEN (1 / state.H_Layer) *
             (- state.J_Up[Layer_Index] - state.J_Dn[Layer_Index]
              + state.J_G[Layer_Index-1] - state.J_G[Layer_Index]) +
             (1 / state.V_Layer) * state.SolidFlux_In
        ELSE (1 / state.H_Layer) *
             (state.J_Up[Layer_Index+1] - state.J_Up[Layer_Index]
              + state.J_Dn[Layer_Index-1] - state.J_Dn[Layer_Index]
              + state.J_G[Layer_Index-1] - state.J_G[Layer_Index]);
    };
    
    { DERIV(state.X_Layer[NrOfLayers],[independent.t]) =
       (1 / state.H_Layer) *
       (state.J_Dn[NrOfLayersButOne] + state.J_G[NrOfLayersButOne]) -
       (state.Q_Under_Actual  / state.V_Layer) * state.X_Layer[NrOfLayers];
    };
    

    { DERIV(state.S_I_Layer[1],[independent.t]) =
       (state.Q_Out / state.V_Layer) * (state.S_I_Layer[2] - state.S_I_Layer[1]);
    };

    { FOREACH Layer_Index IN {2 .. NrOfLayersButOne}:
       DERIV(state.S_I_Layer[Layer_Index],[independent.t]) =
        IF (Layer_Index == IndexOfFeedLayer)
        THEN (1 / state.V_Layer) *
             (state.InFluxPerComponent[S_I] - state.Q_In * state.S_I_Layer[IndexOfFeedLayer])
        ELSE 
        IF (Layer_Index < IndexOfFeedLayer)
        THEN (state.Q_Out / state.V_Layer) *
             (state.S_I_Layer[Layer_Index+1] - state.S_I_Layer[Layer_Index])
        ELSE (state.Q_Under_Actual  / state.V_Layer) *
          (state.S_I_Layer[Layer_Index-1] - state.S_I_Layer[Layer_Index]);
    };

    
    { DERIV(state.S_S_Layer[1],[independent.t]) =
       (state.Q_Out / state.V_Layer) * (state.S_S_Layer[2] - state.S_S_Layer[1]);
    };

    { FOREACH Layer_Index IN {2 .. NrOfLayersButOne}:
       DERIV(state.S_S_Layer[Layer_Index],[independent.t]) =
        IF (Layer_Index == IndexOfFeedLayer)
        THEN (1 / state.V_Layer) *
             (state.InFluxPerComponent[S_S] - state.Q_In * state.S_S_Layer[IndexOfFeedLayer])
        ELSE
        IF (Layer_Index < IndexOfFeedLayer)
        THEN (state.Q_Out / state.V_Layer) *
             (state.S_S_Layer[Layer_Index+1] - state.S_S_Layer[Layer_Index])
        ELSE (state.Q_Under_Actual  / state.V_Layer) *
          (state.S_S_Layer[Layer_Index-1] - state.S_S_Layer[Layer_Index]);
    };    

    { DERIV(state.S_O_Layer[1],[independent.t]) =
       (state.Q_Out / state.V_Layer) * (state.S_O_Layer[2] - state.S_O_Layer[1]);
    };

    { FOREACH Layer_Index IN {2 .. NrOfLayersButOne}:
       DERIV(state.S_O_Layer[Layer_Index],[independent.t]) =
        IF (Layer_Index == IndexOfFeedLayer)
        THEN (1 / state.V_Layer) *
             (state.InFluxPerComponent[S_O] - state.Q_In * state.S_O_Layer[IndexOfFeedLayer])
        ELSE 
        IF (Layer_Index < IndexOfFeedLayer)
        THEN (state.Q_Out / state.V_Layer) *
             (state.S_O_Layer[Layer_Index+1] - state.S_O_Layer[Layer_Index])
        ELSE (state.Q_Under_Actual  / state.V_Layer) *
          (state.S_O_Layer[Layer_Index-1] - state.S_O_Layer[Layer_Index]);
    };

    { DERIV(state.S_NO_Layer[1],[independent.t]) =
       (state.Q_Out / state.V_Layer) * (state.S_NO_Layer[2] - state.S_NO_Layer[1]);
    };

    { FOREACH Layer_Index IN {2 .. NrOfLayersButOne}:
       DERIV(state.S_NO_Layer[Layer_Index],[independent.t]) =
        IF (Layer_Index == IndexOfFeedLayer)
        THEN (1 / state.V_Layer) *
             (state.InFluxPerComponent[S_NO] - state.Q_In * state.S_NO_Layer[IndexOfFeedLayer])
        ELSE 
        IF (Layer_Index < IndexOfFeedLayer)
        THEN (state.Q_Out / state.V_Layer) *
             (state.S_NO_Layer[Layer_Index+1] - state.S_NO_Layer[Layer_Index])
        ELSE (state.Q_Under_Actual  / state.V_Layer) *
          (state.S_NO_Layer[Layer_Index-1] - state.S_NO_Layer[Layer_Index]);
    };

    { DERIV(state.S_NH_Layer[1],[independent.t]) =
       (state.Q_Out / state.V_Layer) * (state.S_NH_Layer[2] - state.S_NH_Layer[1]);
    };

    { FOREACH Layer_Index IN {2 .. NrOfLayersButOne}:
       DERIV(state.S_NH_Layer[Layer_Index],[independent.t]) =
        IF (Layer_Index == IndexOfFeedLayer)
        THEN (1 / state.V_Layer) *
             (state.InFluxPerComponent[S_NH] - state.Q_In * state.S_NH_Layer[IndexOfFeedLayer])
        ELSE 
        IF (Layer_Index < IndexOfFeedLayer)
        THEN (state.Q_Out / state.V_Layer) *
             (state.S_NH_Layer[Layer_Index+1] - state.S_NH_Layer[Layer_Index])
        ELSE (state.Q_Under_Actual  / state.V_Layer) *
          (state.S_NH_Layer[Layer_Index-1] - state.S_NH_Layer[Layer_Index]);
    };

    { DERIV(state.S_ND_Layer[1],[independent.t]) =
       (state.Q_Out / state.V_Layer) * (state.S_ND_Layer[2] - state.S_ND_Layer[1]);
    };

    { FOREACH Layer_Index IN {2 .. NrOfLayersButOne}:
       DERIV(state.S_ND_Layer[Layer_Index],[independent.t]) =
        IF (Layer_Index == IndexOfFeedLayer)
        THEN (1 / state.V_Layer) *
             (state.InFluxPerComponent[S_ND] - state.Q_In * state.S_ND_Layer[IndexOfFeedLayer])
        ELSE 
        IF (Layer_Index < IndexOfFeedLayer)
        THEN (state.Q_Out / state.V_Layer) *
             (state.S_ND_Layer[Layer_Index+1] - state.S_ND_Layer[Layer_Index])
        ELSE (state.Q_Under_Actual  / state.V_Layer) *
          (state.S_ND_Layer[Layer_Index-1] - state.S_ND_Layer[Layer_Index]);
    };

    { DERIV(state.S_ALK_Layer[1],[independent.t]) =
       (state.Q_Out / state.V_Layer) * (state.S_ALK_Layer[2] - state.S_ALK_Layer[1]);
    };

    { FOREACH Layer_Index IN {2 .. NrOfLayersButOne}:
       DERIV(state.S_ALK_Layer[Layer_Index],[independent.t]) =
        IF (Layer_Index == IndexOfFeedLayer)
        THEN (1 / state.V_Layer) *
             (state.InFluxPerComponent[S_ALK] - state.Q_In * state.S_ALK_Layer[IndexOfFeedLayer])
        ELSE 
        IF (Layer_Index < IndexOfFeedLayer)
        THEN (state.Q_Out / state.V_Layer) *
             (state.S_ALK_Layer[Layer_Index+1] - state.S_ALK_Layer[Layer_Index])
        ELSE (state.Q_Under_Actual  / state.V_Layer) *
          (state.S_ALK_Layer[Layer_Index-1] - state.S_ALK_Layer[Layer_Index]);
    };
    { DERIV(state.S_I_Layer[NrOfLayers],[independent.t]) =
       (state.Q_Under_Actual  / state.V_Layer) * 
       (state.S_I_Layer[NrOfLayersButOne] - state.S_I_Layer[NrOfLayers]);
    };
 
    { DERIV(state.S_S_Layer[NrOfLayers],[independent.t]) =
       (state.Q_Under_Actual  / state.V_Layer) * 
       (state.S_S_Layer[NrOfLayersButOne] - state.S_S_Layer[NrOfLayers]);
    };

    { DERIV(state.S_O_Layer[NrOfLayers],[independent.t]) =
       (state.Q_Under_Actual  / state.V_Layer) * 
       (state.S_O_Layer[NrOfLayersButOne] - state.S_O_Layer[NrOfLayers]);
    };

    { DERIV(state.S_NO_Layer[NrOfLayers],[independent.t]) =
       (state.Q_Under_Actual  / state.V_Layer) * 
       (state.S_NO_Layer[NrOfLayersButOne] - state.S_NO_Layer[NrOfLayers]);
    };

    { DERIV(state.S_NH_Layer[NrOfLayers],[independent.t]) =
       (state.Q_Under_Actual  / state.V_Layer) * 
       (state.S_NH_Layer[NrOfLayersButOne] - state.S_NH_Layer[NrOfLayers]);
    };

    { DERIV(state.S_ND_Layer[NrOfLayers],[independent.t]) =
       (state.Q_Under_Actual  / state.V_Layer) * 
       (state.S_ND_Layer[NrOfLayersButOne] - state.S_ND_Layer[NrOfLayers]);
    };

    { DERIV(state.S_ALK_Layer[NrOfLayers],[independent.t]) =
       (state.Q_Under_Actual  / state.V_Layer) * 
       (state.S_ALK_Layer[NrOfLayersButOne] - state.S_ALK_Layer[NrOfLayers]);
    };

    state.X_Out = IF (state.Q_Out == 0)
      THEN 0
      ELSE state.X_Layer[1];

    state.X_Under = IF (state.Q_Under_Actual == 0)
        THEN 0
        ELSE state.X_Layer[NrOfLayers];    

// Calculation of the height of the sludge blanket

    state.IndexOfSludgeBlanket =
     MSLUFindThreshold(ref(state.X_Layer[1]),NrOfLayers,parameters.X_Lim);

    state.H_S = (NrOfLayers - state.IndexOfSludgeBlanket + 1) *
                parameters.H / NrOfLayers;

// Calculation of the fluxes of all components in the effluent
 
    state.SolidFlux_Out = state.X_Out * state.Q_Out;
    

    interface.Overflow[IndexOfSolvent] = -state.Q_Out / 0.000001;
    interface.Overflow[S_I] = -state.S_I_Layer[1]*state.Q_Out;
    interface.Overflow[S_S] = -state.S_S_Layer[1]*state.Q_Out;
    interface.Overflow[S_O] = -state.S_O_Layer[1]*state.Q_Out;
    interface.Overflow[S_NO] = -state.S_NO_Layer[1]*state.Q_Out;
    interface.Overflow[S_NH] = -state.S_NH_Layer[1]*state.Q_Out;
    interface.Overflow[S_ND] = -state.S_ND_Layer[1]*state.Q_Out;
    interface.Overflow[S_ALK] = -state.S_ALK_Layer[1]*state.Q_Out;

    { FOREACH Comp_Index IN {IndexOfFirstParticulateComponent .. IndexOfLastParticulateComponent}:
      interface.Overflow[Comp_Index] = 
    IF (state.SolidFlux_In == 0)
    THEN 0
    ELSE - (state.InFluxPerComponent[Comp_Index] / state.SolidFlux_In) * state.SolidFlux_Out ;
    };

// Calculation of the fluxes of all components in the underflow

    state.SolidFlux_Under = state.X_Under * state.Q_Under_Actual ;
    

    interface.Underflow[IndexOfSolvent] = - state.Q_Under_Actual  / 0.000001 ;
    interface.Underflow[S_I] = -state.S_I_Layer[NrOfLayers]*state.Q_Under_Actual ;
    interface.Underflow[S_S] = -state.S_S_Layer[NrOfLayers]*state.Q_Under_Actual ;
    interface.Underflow[S_O] = -state.S_O_Layer[NrOfLayers]*state.Q_Under_Actual ;
    interface.Underflow[S_NO] = -state.S_NO_Layer[NrOfLayers]*state.Q_Under_Actual ;
    interface.Underflow[S_NH] = -state.S_NH_Layer[NrOfLayers]*state.Q_Under_Actual ;
    interface.Underflow[S_ND] = -state.S_ND_Layer[NrOfLayers]*state.Q_Under_Actual ;
    interface.Underflow[S_ALK] = -state.S_ALK_Layer[NrOfLayers]*state.Q_Under_Actual ;

    { FOREACH Comp_Index IN {IndexOfFirstParticulateComponent .. IndexOfLastParticulateComponent}:
      interface.Underflow[Comp_Index] =
    IF (state.SolidFlux_In == 0)
    THEN 0
    ELSE - (state.InFluxPerComponent[Comp_Index] / state.SolidFlux_In) * state.SolidFlux_Under ;
    };

// calculation of TakacsDataTerminal

    interface.Sludge_Blanket_Height = state.H_S;
 
   };

 :};
#endif //ASM1Temp

#endif // WWTP_BASE_PRIMARY_CLARIFIER_PRIMARYTAKACSSOLUBLESPROPAGATOR
